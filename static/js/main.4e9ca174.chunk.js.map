{"version":3,"sources":["App.js","dataUtil.js","components/MenuFiltersItems/FilterSelect.jsx","components/MenuFiltersItems/FilterSlide.jsx","components/MenuFilters.jsx","components/MenuCharts.jsx","components/Charts/WinnersByCountry.jsx","components/Charts/WinnersByRadio.jsx","components/Charts/WinnersByCategory.jsx","components/Charts/WinnersByYear.jsx","components/Charts/WinnersByTable.jsx","components/NobelCharts.jsx","components/NobelApp.jsx","index.js"],"names":["LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","COLOR_PALETTE","ChartDataUtil","constructor","data","this","_data","_initOptions","_initFilters","filterData","options","_options","filters","_filters","filteredData","_filteredData","prototype","countries","Array","from","d3","d","country","keys","sort","categories","category","years","year","a","b","genders","gender","v","length","d1","d2","slice","map","concat","at","_buildChartData","winnersByCountry","maxWinners","sumWinners","k","countryNum","console","log","filter","find","item","toLowerCase","getNumByCountry","i","number","countryId","_","require","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","FilterSelect","label","defaultOptions","onSetFilter","sx","selectedOptions","setSelectedOptions","useState","labelId","selectId","setCtrlId","uniqueId","FormControl","InputLabel","id","Select","multiple","value","onChange","event","target","newValue","split","input","OutlinedInput","renderValue","selected","join","fontSize","fontWeight","option","MenuItem","Checkbox","checked","includes","ListItemText","primary","FilterSlide","props","range","min","max","setValue","Paper","elevation","textAlign","pt","px","Slider","defaultValue","onChangeCommitted","valueLabelDisplay","step","marks","disableSwap","mt","MenuFilters","commonConfig","maxWidth","Grid","container","direction","columnSpacing","rowSpacing","justifyContent","alignItems","wrap","xs","sm","md","lg","xl","React","chartList","text","MenuCharts","selection","onSetSelection","marginTop","ToggleButtonGroup","color","exclusive","newSelection","textTransform","flexWrap","index","ToggleButton","margins","top","right","bottom","left","WinnersByCountry","xDataKey","xDataType","barDataKey","barDataType","beginYear","endYear","minWidth","ResponsiveContainer","height","BarChart","margin","dataKey","tick","CustomizedAxisTick","tickLine","axisLine","allowDataOverflow","interval","hide","content","CustomTooltip","Legend","align","verticalAlign","wrapperStyle","paddingTop","Bar","name","fill","legendType","LabelList","position","entry","Cell","x","y","payload","transform","dx","dy","textAnchor","active","Math","PI","WinnersByRadio","filterDataByRadio","minHeight","PieChart","Pie","cx","cy","outerRadius","renderCustomizedLabel","contentStyle","backgroundColor","borderRadius","paddingBottom","paddingLeft","paddingRight","allowEscapeViewBox","CustomLegend","midAngle","innerRadius","percent","dominantBaseline","toFixed","radio","minRadio","sum","reduce","forEach","getRadioByCountry","totalNum","acc","c","othersRadio","totalFilteredNum","push","mark","horPaddings","vertPaddings","WinnersByCategory","dataPerYear","sortedData","yearNum","buildData","chartHeight","xAxisWidth","overflow","ScatterChart","strokeDasharray","allowDuplicatedCategory","type","domain","tickCount","angle","minTickGap","tickMargin","padding","verticalAnchor","ZAxis","layout","cursor","categoryData","Scatter","shape","memo","WinnersByYear","o","obj","Object","fromEntries","hasOwnProperty","AreaChart","iconType","Area","stackId","stroke","WinnersByTable","rows","columns","entries","field","headerName","fluid","renderCell","params","lineHeight","href","row","toString","components","Toolbar","GridToolbar","NobelCharts","selectedChart","scatterData","useMemo","buildScatter","barchartData","buildBarchartAndPieChart","areachartData","buildAreaChart","tablechartData","buildTableChart","NobelApp","isDataLoaded","setData","chart","setChart","useEffect","async","url","fetch","then","response","ok","Error","statusText","catch","error","fetchData","rawData","handleFilterChange","useCallback","clone","handleMenuCharts","newChart","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.4e9ca174.chunk.js","sourcesContent":["import {\r\n  CartesianGrid,\r\n  Line,\r\n  LineChart,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis\r\n} from \"recharts\";\r\nimport \"./styles.css\";\r\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\r\nconst data = [{ name: \"Page A\", uv: 400, pv: 2400, amt: 2400 }];\r\n\r\nconst renderLineChart = (\r\n  <LineChart width={600} height={300} data={data}>\r\n    <Line\r\n      type=\"monotone\"\r\n      dataKey=\"pv\"\r\n      stroke=\"#8884d8\"\r\n      margin={{ top: 50, right: 20, bottom: 5, left: 200 }}\r\n    />\r\n    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"10 5\" />\r\n    <XAxis dataKey=\"name\" />\r\n    <YAxis />\r\n    <Tooltip />\r\n  </LineChart>\r\n);\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Nobel Prize All In One</h1>\r\n      {/* {renderLineChart} */}\r\n    </div>\r\n  );\r\n}\r\n","import * as d3 from \"d3\";\r\n\r\nexport const COLOR_PALETTE = [\r\n  \"#0cc0aa\",\r\n  \"#4787c9\",\r\n  \"#fb0998\",\r\n  \"#59a20c\",\r\n  \"#7c08c5\",\r\n  \"#e0c645\",\r\n  \"#715cb6\",\r\n  \"#ef972d\",\r\n  \"#a57a6a\",\r\n  \"#c6c0fe\",\r\n  \"#ec9bfa\",\r\n  \"#421674\",\r\n  \"#b3e467\",\r\n  \"#5c190c\",\r\n  \"#55f17b\",\r\n  \"#c25357\",\r\n  \"#b9dcca\",\r\n  \"#29403b\",\r\n  \"#f4b8ab\",\r\n  \"#6a8b7b\",\r\n];\r\n\r\nexport async function fetchData(url) {\r\n  console.log(\"URL:\", url)\r\n  const data = await fetch(url)\r\n    .then((response) => {\r\n      if (!response.ok) throw new Error(response.statusText);\r\n      return response.text();\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(\"Data fetch complete!\");\r\n  return data;\r\n  // try {\r\n  //   let response = await fetch(url);\r\n  //   if (!response.ok) {\r\n  //     throw new Error(response.statusText);\r\n  //   }\r\n  //   let text = await response.text();\r\n  //   // console.log(text);\r\n  //   return text;\r\n  // } catch (error) {\r\n  //   console.log(\"handleError:\", error);\r\n  //   throw error;\r\n  // }\r\n}\r\n\r\nexport class ChartDataUtil {\r\n  constructor(data) {\r\n    this._data = data;\r\n    this._initOptions();\r\n    this._initFilters();\r\n    this.filterData();\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get filters() {\r\n    return this._filters;\r\n  }\r\n\r\n  get filteredData() {\r\n    return this._filteredData;\r\n  }\r\n}\r\n\r\nChartDataUtil.prototype._initOptions = function () {\r\n  this._options = {};\r\n  this._options.countries = Array.from(\r\n    d3.group(this._data, (d) => d.country).keys()\r\n  ).sort();\r\n  this._options.categories = Array.from(\r\n    d3.group(this._data, (d) => d.category).keys()\r\n  );\r\n  this._options.years = Array.from(\r\n    d3.group(this._data, (d) => d.year).keys()\r\n  ).sort((a, b) => a - b);\r\n  this._options.genders = [\"Male\", \"Female\"];\r\n};\r\n\r\nChartDataUtil.prototype._initFilters = function () {\r\n  this._filters = {};\r\n  this._filters.category = [...this._options.categories];\r\n  this._filters.gender = [...this._options.genders];\r\n  this._filters.country = d3\r\n    .rollups(\r\n      this._data,\r\n      (v) => v.length,\r\n      (d) => d.country\r\n    )\r\n    .sort((d1, d2) => d3.descending(d1[1], d2[1]))\r\n    .slice(0, 10)\r\n    .map((d) => d[0])\r\n    .concat([\"China\", \"India\"]);\r\n  this._filters.year = [this._options.years[0], this._options.years.at(-1)];\r\n};\r\n\r\nChartDataUtil.prototype._buildChartData = function () {\r\n  this._filteredData.winnersByCountry = d3\r\n    .flatRollup(\r\n      this._filteredData,\r\n      (v) => v.length,\r\n      (d) => d.country\r\n    )\r\n    .sort((a, b) => d3.descending(a[1], b[1]));\r\n\r\n  this._filteredData.maxWinners = this._filteredData.winnersByCountry[0];\r\n  this._filteredData.sumWinners = d3.sum(\r\n    this._filteredData.winnersByCountry,\r\n    ([k, v]) => v\r\n  );\r\n  this._filteredData.countryNum = this._filteredData.winnersByCountry.length;\r\n  this._filteredData.year = this._filters.year;\r\n  this._filteredData.categories = this._filters.category;\r\n};\r\n\r\nChartDataUtil.prototype.filterData = function (filters = null) {\r\n  if (filters) this._filters = filters;\r\n  console.log(\"Before filter, filters:\", filters);\r\n  console.log(\"Before filter, data:\", this);\r\n  this._filteredData = this._data.filter(\r\n    (d) =>\r\n      d.year >= this._filters.year[0] &&\r\n      d.year <= this._filters.year[1] &&\r\n      this._filters.country.find(\r\n        (item) => item.toLowerCase() == d.country.toLowerCase()\r\n      ) &&\r\n      this._filters.category.find(\r\n        (item) => item.toLowerCase() == d.category.toLowerCase()\r\n      ) &&\r\n      this._filters.gender.find(\r\n        (item) => item.toLowerCase() == d.gender.toLowerCase()\r\n      )\r\n  );\r\n\r\n  this._buildChartData();\r\n  console.log(\"After filter, data:\", this);\r\n  return this;\r\n};\r\n\r\nexport const getNumByCountry = (filter) => {\r\n  return filter.winnersByCountry.map((d, i) => ({\r\n    country: d[0],\r\n    number: d[1],\r\n    countryId: i + 1,\r\n  }));\r\n};\r\n\r\nexport const getRadioByCountry = (data) => {\r\n  let sum = data.reduce((sum, d) => sum + d.number, 0);\r\n  data.forEach((d) => {\r\n    d.radio = (d.number * 100) / sum;\r\n    // d.radio = `${((d.number * 100) / sum).toFixed(0)}%`;\r\n  });\r\n  return data;\r\n};\r\n","import { useState } from \"react\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport InputLabel from \"@mui/material/InputLabel\";\r\nimport MenuItem from \"@mui/material/MenuItem\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport ListItemText from \"@mui/material/ListItemText\";\r\nimport Select from \"@mui/material/Select\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n\r\nconst _ = require(\"lodash\");\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n};\r\n\r\nexport const FilterSelect = ({\r\n  data,\r\n  label,\r\n  options,\r\n  defaultOptions,\r\n  onSetFilter,\r\n  sx,\r\n}) => {\r\n  console.log(\"label:\", label);\r\n  const [selectedOptions, setSelectedOptions] = useState(defaultOptions);\r\n  const [[labelId, selectId], setCtrlId] = useState([\r\n    _.uniqueId(label + \"_id_\"),\r\n    _.uniqueId(label + \"_select_\"),\r\n  ]);\r\n\r\n  const handleChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    const newValue = typeof value === \"string\" ? value.split(\",\") : value;\r\n    setSelectedOptions(\r\n      // On autofill we get a the stringified value.\r\n      newValue\r\n    );\r\n    console.log(\"new filter:\", {\r\n      ...data.filters,\r\n      [label.toLowerCase()]: newValue,\r\n    });\r\n    onSetFilter({ ...data.filters, [label.toLowerCase()]: newValue });\r\n  };\r\n  return (\r\n    <>\r\n      <FormControl sx={{ ...sx }}>\r\n        <InputLabel id={labelId}>{label}</InputLabel>\r\n        <Select\r\n          labelId={labelId}\r\n          id={selectId}\r\n          multiple\r\n          value={selectedOptions}\r\n          onChange={handleChange}\r\n          input={<OutlinedInput label={label} />}\r\n          renderValue={(selected) => selected.join(\", \")}\r\n          MenuProps={MenuProps}\r\n          sx={{ fontSize: \"small\", fontWeight: 200 }}\r\n        >\r\n          {options.map((option) => (\r\n            <MenuItem key={option} value={option} sx={{ fontSize: \"small\" }}>\r\n              <Checkbox checked={selectedOptions.includes(option)} />\r\n              <ListItemText primary={option} />\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n    </>\r\n  );\r\n};\r\n","import { Paper, Slider } from \"@mui/material\";\r\nimport { useState } from \"react\";\r\n\r\nexport function FilterSlide(props) {\r\n  const { range, onSetFilter, data, min, max } = props;\r\n  const [value, setValue] = useState(range);\r\n  const handleSliderChange = (event, newValue) => {\r\n    console.log(\"On Slider Change:\", newValue);\r\n    setValue(newValue);\r\n  };\r\n  const handleSliderCommitChange = (event, newValue) => {\r\n    console.log(\"On Slider Commit Change:\", newValue);\r\n    onSetFilter({ ...data.filters, year: newValue });\r\n  };\r\n\r\n  return (\r\n    <Paper\r\n      elevation={10}\r\n      sx={{\r\n        textAlign: \"center\",\r\n        pt: 2,\r\n        px: 3,\r\n      }}\r\n    >\r\n      <Slider\r\n        defaultValue={range}\r\n        value={value}\r\n        onChange={handleSliderChange}\r\n        onChangeCommitted={handleSliderCommitChange}\r\n        valueLabelDisplay=\"on\"\r\n        min={min}\r\n        max={max}\r\n        step={1}\r\n        marks\r\n        disableSwap\r\n        sx={{ mt: 0 }}\r\n      ></Slider>\r\n    </Paper>\r\n  );\r\n}\r\n","import { Grid } from \"@mui/material\";\r\nimport * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { FilterSelect } from \"./MenuFiltersItems/FilterSelect\";\r\nimport { FilterSlide } from \"./MenuFiltersItems/FilterSlide\";\r\n\r\nconst MenuFilters = ({ data, onSetFilter }) => {\r\n  console.log(\"Menu rendering\");\r\n  const commonConfig = {\r\n    data,\r\n    onSetFilter,\r\n    sx: { width: \"100%\", maxWidth: \"100%\" },\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      columnSpacing={2}\r\n      rowSpacing={1}\r\n      justifyContent=\"center\"\r\n      alignItems=\"center\"\r\n      wrap=\"wrap\"\r\n      mt={1}\r\n    >\r\n      <Grid item xs={8} sm={4} md={4} lg={2} xl={2}>\r\n        <FilterSelect\r\n          {...{\r\n            ...commonConfig,\r\n            label: \"Category\",\r\n            options: data.options.categories,\r\n            defaultOptions: data.filters.category,\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={4} sm={2} md={2} lg={1} xl={1}>\r\n        <FilterSelect\r\n          {...{\r\n            ...commonConfig,\r\n            label: \"Gender\",\r\n            options: data.options.genders,\r\n            defaultOptions: data.filters.gender,\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={6} md={6} lg={3} xl={3}>\r\n        <FilterSelect\r\n          {...{\r\n            ...commonConfig,\r\n            label: \"Country\",\r\n            options: data.options.countries,\r\n            defaultOptions: data.filters.country,\r\n          }}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={12} sm={10} md={10} lg={6} xl={6}>\r\n        <FilterSlide\r\n          {...{\r\n            ...commonConfig,\r\n            range: data.filters.year,\r\n            min: data.options.years[0],\r\n            max: data.options.years.at(-1),\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default React.memo(MenuFilters);\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport ToggleButton from \"@mui/material/ToggleButton\";\r\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\r\n\r\nconst chartList = [\r\n  { value: \"WinnersByCountry\", text: \"Winners By Country\" },\r\n  { value: \"WinnersByCategory\", text: \"Winners By Category\" },\r\n  { value: \"WinnersByYear\", text: \"Winners By Year\" },\r\n  { value: \"WinnersByTable\", text: \"Winners By Table\" },\r\n];\r\n\r\nfunction MenuCharts({ selection, onSetSelection }) {\r\n  console.log(\"MenuCharts render\");\r\n  const handleSelection = (event, newSelection) => {\r\n    console.log(\"handleSelection newSelection:\", newSelection);\r\n    if (newSelection) onSetSelection(newSelection);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{ textAlign: \"center\", marginTop: 10 }}\r\n    >\r\n      <ToggleButtonGroup\r\n        color=\"primary\"\r\n        value={selection}\r\n        exclusive\r\n        onChange={handleSelection}\r\n        sx={{\r\n          textTransform: \"none\",\r\n          justifyContent: \"center\",\r\n          flexWrap: \"wrap\",\r\n        }}\r\n      >\r\n        {chartList.map((item, index) => (\r\n          <ToggleButton\r\n            key={index}\r\n            value={item.value}\r\n            sx={{ textTransform: \"none\", fontSize: \"large\" }}\r\n          >\r\n            {item.text}\r\n          </ToggleButton>\r\n        ))}\r\n      </ToggleButtonGroup>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default React.memo(MenuCharts);\r\n","import * as React from \"react\";\r\nimport {\r\n  BarChart,\r\n  Cell,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  Bar,\r\n  ResponsiveContainer,\r\n  LabelList,\r\n} from \"recharts\";\r\n\r\nimport { getNumByCountry, COLOR_PALETTE } from \"../../dataUtil\";\r\n\r\nconst margins = {\r\n  top: 80,\r\n  right: 5,\r\n  bottom: 100,\r\n  left: 30,\r\n};\r\nconst minXTickGap = 50;\r\n\r\nexport const WinnersByCountry = ({\r\n  data,\r\n  xDataKey,\r\n  xDataType,\r\n  barDataKey,\r\n  barDataType,\r\n  beginYear,\r\n  endYear,\r\n}) => {\r\n  console.log(\"WinnersByCountry render\");\r\n  data = getNumByCountry(data);\r\n  console.log(\"WinnersByCountry barchartData:\", data);\r\n\r\n  const minWidth = data.length * minXTickGap;\r\n  console.log(\"WinnersByCountry minWidth:\", minWidth);\r\n  return (\r\n    <>\r\n      <ResponsiveContainer width={\"100%\"} minWidth={minWidth} height={600}>\r\n        <BarChart data={data} margin={margins}>\r\n          <XAxis\r\n            dataKey={xDataKey}\r\n            tick={<CustomizedAxisTick data={data} />}\r\n            tickLine={false}\r\n            axisLine={false}\r\n            allowDataOverflow={false}\r\n            interval={0}\r\n            fontSize={20}\r\n          />\r\n          <YAxis hide={true} axisLine={false} tickLine={false} />\r\n          <Tooltip content={<CustomTooltip />} />\r\n          <Legend\r\n            align=\"center\"\r\n            verticalAlign=\"middle\"\r\n            height={36}\r\n            wrapperStyle={{ top: 3, paddingTop: 2, fontSize: 20 }}\r\n          />\r\n          <Bar\r\n            name={`Nobel winners by country(${beginYear}~${endYear})`}\r\n            dataKey={barDataKey}\r\n            fill=\"#666\"\r\n            legendType=\"square\"\r\n            interval={30}\r\n          >\r\n            <LabelList dataKey={barDataKey} position=\"top\" />\r\n            {data.map((entry, index) => (\r\n              <Cell\r\n                key={`cell-${index}`}\r\n                fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\r\n              />\r\n            ))}\r\n          </Bar>\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nconst CustomizedAxisTick = (props) => {\r\n  const { x, y, payload, data, index } = props;\r\n  console.log(\"Render AxisTick props:\", props);\r\n  console.log(\"Payload value:\", data[payload.value - 1].country);\r\n\r\n  return (\r\n    <g transform={`translate(${x},${y})`}>\r\n      <text\r\n        x={0}\r\n        y={0}\r\n        dx={-5}\r\n        dy={0}\r\n        textAnchor=\"end\"\r\n        fill=\"#666\"\r\n        transform=\"rotate(-90)\"\r\n      >\r\n        {data[payload.value - 1].country}\r\n      </text>\r\n    </g>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = ({ active, payload, label }) => {\r\n  //Don't display tooltip, but remaining the animation effect of bar selection\r\n  return null;\r\n};\r\n\r\nexport default React.memo(WinnersByCountry);\r\n","import * as React from \"react\";\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nimport {\r\n  getNumByCountry,\r\n  getRadioByCountry,\r\n  COLOR_PALETTE,\r\n} from \"../../dataUtil\";\r\n\r\nconst RADIAN = Math.PI / 180;\r\nconst margins = {\r\n  top: 30,\r\n  right: 5,\r\n  bottom: 100,\r\n  left: 40,\r\n};\r\n\r\nconst WinnersByRadio = ({ data, dataKey, beginYear, endYear }) => {\r\n  console.log(\"WinnersByRadio render\");\r\n  const filteredData = filterDataByRadio(data, 5);\r\n  console.log(\"filtered pie data:\", filteredData);\r\n  return (\r\n    <ResponsiveContainer\r\n      width={\"100%\"}\r\n      minWidth={240}\r\n      height={600}\r\n      minHeight={500}\r\n    >\r\n      <PieChart margin={margins}>\r\n        <text x={150} y={30} fill=\"#666\" fontSize={20} textAnchor=\"middle\">\r\n          Winners Percentage By Country\r\n          <tspan x={120} y={50}>\r\n            ({beginYear}~{endYear})\r\n          </tspan>\r\n        </text>\r\n        <Pie\r\n          data={filteredData}\r\n          dataKey={dataKey}\r\n          cx={120}\r\n          cy={150}\r\n          outerRadius={70}\r\n          fill=\"#8884d8\"\r\n          label={renderCustomizedLabel}\r\n        >\r\n          {filteredData.map((entry, index) => (\r\n            <Cell\r\n              key={`cell-${index}`}\r\n              fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\r\n            />\r\n          ))}\r\n        </Pie>\r\n        <Tooltip\r\n          contentStyle={{\r\n            backgroundColor: \"#f7efd2\",\r\n            borderRadius: 10,\r\n            paddingTop: 2,\r\n            paddingBottom: 2,\r\n            paddingLeft: 10,\r\n            paddingRight: 10,\r\n          }}\r\n          content={<CustomTooltip data={filteredData} />}\r\n          allowEscapeViewBox={{ x: false, y: false }}\r\n        />\r\n        <Legend content={<CustomLegend data={filteredData} />} />\r\n      </PieChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nconst renderCustomizedLabel = (props) => {\r\n  const {\r\n    x,\r\n    y,\r\n    cx,\r\n    cy,\r\n    midAngle,\r\n    innerRadius,\r\n    outerRadius,\r\n    percent,\r\n    index,\r\n  } = props;\r\n  console.log(\"Pie label:\", props);\r\n\r\n  return (\r\n    <text\r\n      x={x}\r\n      y={y}\r\n      fill=\"black\"\r\n      textAnchor={x > cx ? \"start\" : \"end\"}\r\n      dominantBaseline=\"central\"\r\n    >\r\n      {`${(percent * 100).toFixed(0)}%`}\r\n    </text>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = (props) => {\r\n  const { data, active, payload, label, contentStyle } = props;\r\n  console.log(\"Pie tooltop:\", props);\r\n\r\n  if (active && payload && payload.length) {\r\n    const index = payload[0].name;\r\n    console.log(\"Pie index:\", index);\r\n    const { country, number, radio } = data[index];\r\n    return (\r\n      <div style={{ ...contentStyle }}>\r\n        <p>{`Percentage: ${radio.toFixed(0)}%`}</p>\r\n        <p>{`Number: ${number}`}</p>\r\n        <p>{`Country: ${country}`}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nconst CustomLegend = (props) => {\r\n  const { data, payload } = props;\r\n  console.log(\"xxx legend:\", props);\r\n  return (\r\n    <ul style={{ marginTop: 20 }}>\r\n      {payload.map((entry, index) => (\r\n        <li\r\n          key={`item-${index}`}\r\n          style={{ color: COLOR_PALETTE[index % COLOR_PALETTE.length] }}\r\n        >\r\n          {data[entry.value].country}\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst filterDataByRadio = (data, minRadio) => {\r\n  data = getNumByCountry(data);\r\n  console.log(\"barchartData:\", data);\r\n  data = getRadioByCountry(data);\r\n\r\n  console.log(\"XXXXXX, RAW data:\", data);\r\n  let totalNum = data.reduce((acc, c) => acc + c.number, 0);\r\n  console.log(\"XXXXXX, RAW data total num:\", totalNum);\r\n  let filteredData = data.filter((d) => d.radio >= minRadio);\r\n  console.log(\"XXXXXX, filtered data:\", filteredData);\r\n  let othersRadio = 100 - filteredData.reduce((acc, c) => acc + c.radio, 0);\r\n  let totalFilteredNum = filteredData.reduce((acc, c) => acc + c.number, 0);\r\n  filteredData.push({\r\n    country: \"Others\",\r\n    countryId: filteredData.length + 1,\r\n    number: totalNum - totalFilteredNum,\r\n    radio: othersRadio,\r\n  });\r\n  return filteredData;\r\n};\r\n\r\nexport default React.memo(WinnersByRadio);\r\n","import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { COLOR_PALETTE } from \"../../dataUtil\";\r\nimport {\r\n  CartesianGrid,\r\n  Legend,\r\n  ResponsiveContainer,\r\n  Scatter,\r\n  Cell,\r\n  ScatterChart,\r\n  Tooltip,\r\n  XAxis,\r\n  YAxis,\r\n  ZAxis,\r\n} from \"recharts\";\r\n\r\nconst mark = {\r\n  size: 10,\r\n  width: 10,\r\n  height: 15,\r\n};\r\n\r\nconst horizontalGap = 10;\r\nconst margins = {\r\n  top: 20,\r\n  right: 20,\r\n  bottom: 30,\r\n  left: 0,\r\n};\r\nconst horPaddings = { left: 10, right: 20 };\r\nconst vertPaddings = { top: 10, bottom: 10 };\r\n\r\nconst buildData = (data) => {\r\n  const sortedData = [...data].sort(\r\n    (a, b) =>\r\n      d3.ascending(a.year, b.year) || d3.ascending(a.category, b.category)\r\n  );\r\n  console.log(\"XXXXX dataPerYear1:\", sortedData);\r\n  console.log(\"XXXXX dataPerYear1:\", data);\r\n  const dataPerYear = d3.flatGroup(sortedData, (d) => d.year);\r\n\r\n  dataPerYear.forEach(([year, data]) => {\r\n    data.forEach((d, i) => {\r\n      d.index = i + 1;\r\n    });\r\n  });\r\n  console.log(\"XXXXX sorted category:\", data.categories.slice().sort());\r\n  sortedData.maxWinners = d3.max(dataPerYear, (d) => d[1].length);\r\n  sortedData.yearNum =\r\n    sortedData[sortedData.length - 1].year - sortedData[0].year + 1;\r\n  console.log(\"XXXXX dataPerYear2:\", dataPerYear);\r\n  console.log(\"XXXXX sorted data:\", sortedData);\r\n  return [sortedData, data.categories.slice().sort()];\r\n};\r\n\r\nconst WinnersByCategory = (props) => {\r\n  console.log(\"WinnersByCategory render!\");\r\n  const { data } = props;\r\n  const [dataPerYear, categories] = buildData(data);\r\n\r\n  const chartHeight =\r\n    mark.height * 1.2 * dataPerYear.maxWinners +\r\n    margins.top +\r\n    margins.bottom +\r\n    vertPaddings.top +\r\n    vertPaddings.bottom;\r\n\r\n  const xAxisWidth =\r\n    dataPerYear.yearNum * 20 +\r\n    horPaddings.left +\r\n    horPaddings.right +\r\n    margins.left +\r\n    margins.right;\r\n\r\n  console.log(\r\n    \"WinnersByCategory Chart height:\",\r\n    chartHeight,\r\n    \" xAxisWidth:\",\r\n    xAxisWidth\r\n  );\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: chartHeight + 20,\r\n        overflow: \"auto\",\r\n      }}\r\n    >\r\n      <ScatterChart\r\n        margin={margins}\r\n        width={xAxisWidth}\r\n        height={chartHeight}\r\n        minHeight={400}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis\r\n          allowDuplicatedCategory={false}\r\n          dataKey={\"year\"}\r\n          type={\"number\"}\r\n          name={\"year\"}\r\n          domain={[\"dataMin\", \"dataMax\"]}\r\n          interval={0}\r\n          tickCount={dataPerYear.yearNum / 2 + 1}\r\n          angle={-90}\r\n          minTickGap={20}\r\n          tickMargin={25}\r\n          padding={horPaddings}\r\n          tick={{\r\n            textAnchor: \"middle\",\r\n            verticalAnchor: \"end\",\r\n            dx: -3,\r\n          }}\r\n          allowDataOverflow={true}\r\n        />\r\n        <YAxis\r\n          dataKey={\"index\"}\r\n          type={\"number\"}\r\n          name={\"WinnerCount\"}\r\n          interval={0}\r\n          tickCount={dataPerYear.maxWinners}\r\n          domain={[\"dataMin\", \"dataMax+2\"]}\r\n          padding={vertPaddings}\r\n        />\r\n        <ZAxis type=\"number\" range={[100, 100]} />\r\n        <Legend\r\n          layout=\"horizontal\"\r\n          align=\"left\"\r\n          verticalAlign=\"top\"\r\n          wrapperStyle={{\r\n            paddingLeft: 60,\r\n            paddingBottom: 10,\r\n            width: \"50%\",\r\n          }}\r\n        />\r\n        <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\r\n        {categories.map((category, index) => {\r\n          const categoryData = dataPerYear.filter(\r\n            (d) => d.category == category\r\n          );\r\n          console.log(\"fff category:\", categoryData);\r\n          return (\r\n            <Scatter\r\n              shape=\"circle\"\r\n              legendType=\"circle\"\r\n              name={category}\r\n              data={categoryData}\r\n              fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\r\n            >\r\n              {categoryData.map((entry, i) => (\r\n                <Cell\r\n                  key={`cell-${i}`}\r\n                  fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\r\n                />\r\n              ))}\r\n            </Scatter>\r\n          );\r\n        })}\r\n      </ScatterChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(WinnersByCategory);\r\n","import * as React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Button } from \"@mui/material\";\r\nimport { COLOR_PALETTE } from \"../../dataUtil\";\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Area,\r\n  Legend,\r\n} from \"recharts\";\r\nimport * as d3 from \"d3\";\r\n\r\nconst buildData = (data) => {\r\n  const countries = data.winnersByCountry.map((d) => d[0]);\r\n  console.log(\"XXXXX country:\", countries);\r\n  console.log(\"XXXXX data:\", data);\r\n  let sortedData = d3\r\n    .flatRollup(\r\n      [...data],\r\n      (v) => v.length,\r\n      (d) => d.year,\r\n      (d) => d.country\r\n    )\r\n    .sort((a, b) => d3.ascending(a[0], b[0]) || d3.ascending(a[1], b[1]));\r\n\r\n  sortedData = d3\r\n    .flatGroup(sortedData, (d) => d[0])\r\n    .map((d) => [d[0], d[1].map((d) => [d[1], d[2]])]);\r\n  console.log(\"XXXXX sortedData1:\", sortedData);\r\n\r\n  sortedData = sortedData.map((d) => {\r\n    const o = { year: d[0] };\r\n    countries.forEach((c) => {\r\n      const obj = Object.fromEntries(d[1]);\r\n      // console.log(\"XXXX: obj:\", obj);\r\n      obj.hasOwnProperty(c) ? (o[c] = obj[c]) : (o[c] = 0);\r\n    });\r\n    return o;\r\n  });\r\n  console.log(\"XXXXX sortedData2:\", sortedData);\r\n  sortedData.countries = countries;\r\n  sortedData.yearNum =\r\n    sortedData[sortedData.length - 1].year - sortedData[0].year + 1;\r\n  console.log(\"XXXXX sorted data:\", sortedData);\r\n  return sortedData;\r\n};\r\n\r\nconst WinnersByYear = ({ data }) => {\r\n  console.log(\"WinnersByYear render, data:\", data);\r\n  data = buildData(data);\r\n\r\n  const horizontalGap = 10;\r\n  const margins = {\r\n    top: 20,\r\n    right: 100,\r\n    bottom: 30,\r\n    left: 30,\r\n  };\r\n  const horPaddings = { left: 10, right: 20 };\r\n  const vertPaddings = { top: 10, bottom: 10 };\r\n\r\n  const chartHeight =\r\n    400 + margins.top + margins.bottom + vertPaddings.top + vertPaddings.bottom;\r\n\r\n  const xAxisWidth =\r\n    data.yearNum * 20 +\r\n    horPaddings.left +\r\n    horPaddings.right +\r\n    margins.left +\r\n    margins.right;\r\n\r\n  console.log(\"XXX Chart height:\", chartHeight);\r\n  console.log(\"XXX xAxisWidth:\", xAxisWidth);\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"100%\",\r\n        height: chartHeight + 20,\r\n        overflow: \"auto\",\r\n      }}\r\n    >\r\n      <AreaChart\r\n        data={data}\r\n        margin={margins}\r\n        width={xAxisWidth}\r\n        height={chartHeight}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis\r\n          allowDuplicatedCategory={false}\r\n          dataKey={\"year\"}\r\n          type={\"number\"}\r\n          name={\"year\"}\r\n          domain={[\"dataMin\", \"dataMax\"]}\r\n          interval={0}\r\n          tickCount={data.yearNum / 2 + 1}\r\n          angle={-90}\r\n          minTickGap={20}\r\n          tickMargin={25}\r\n          padding={horPaddings}\r\n          tick={{\r\n            textAnchor: \"middle\",\r\n            verticalAnchor: \"end\",\r\n            dx: -3,\r\n          }}\r\n          allowDataOverflow={true}\r\n        />\r\n        <YAxis />\r\n        <Tooltip\r\n          contentStyle={{\r\n            backgroundColor: \"#f7efd2\",\r\n            borderRadius: 10,\r\n            paddingTop: 2,\r\n            paddingBottom: 2,\r\n            paddingLeft: 10,\r\n            paddingRight: 10,\r\n          }}\r\n          content={<CustomTooltip />}\r\n          allowEscapeViewBox={{ x: false, y: false }}\r\n        />\r\n        <Legend\r\n          layout=\"horizontal\"\r\n          align=\"left\"\r\n          verticalAlign=\"top\"\r\n          iconType=\"rect\"\r\n          wrapperStyle={{\r\n            paddingLeft: 60,\r\n            paddingBottom: 10,\r\n            width: \"50%\",\r\n          }}\r\n        />\r\n        {data.countries.map((c, i) => (\r\n          <Area\r\n            key={i}\r\n            type=\"step\"\r\n            dataKey={c}\r\n            stackId=\"1\"\r\n            stroke={COLOR_PALETTE[i % COLOR_PALETTE.length]}\r\n            fill={COLOR_PALETTE[i % COLOR_PALETTE.length]}\r\n          />\r\n        ))}\r\n      </AreaChart>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CustomTooltip = (props) => {\r\n  const { active, payload, label, contentStyle } = props;\r\n  console.log(\"Area tooltop:\", props);\r\n\r\n  if (active && payload && payload.length) {\r\n    payload.filter((d) => d.value > 0);\r\n\r\n    return (\r\n      <div style={{ ...contentStyle }}>\r\n        <p>{`Year:${label}`}</p>\r\n        {payload\r\n          .sort((a, b) => b.value - a.value)\r\n          .filter((d) => d.value > 0)\r\n          .map((d, i) => {\r\n            return (\r\n              <p\r\n                key={i}\r\n                style={{ color: d.fill }}\r\n              >{`${d.dataKey}:${d.value}`}</p>\r\n            );\r\n          })}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default React.memo(WinnersByYear);\r\n","import * as React from \"react\";\r\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\r\nimport { Button } from \"@mui/material\";\r\n\r\nfunction WinnersByTable({ data }) {\r\n  console.log(\"WinnersByTable render:\", data);\r\n  const rows = data.map((d, i) => {\r\n    d.id = i;\r\n    return d;\r\n  });\r\n  console.log(\"WinnersByTable:\", data[0]);\r\n  const columns = Object.entries(data[0]).map((d) => {\r\n    let o = { field: d[0], headerName: d[0], width: 150, fluid: 1 };\r\n    if (d[0] == \"id\") {\r\n      o.hide = true;\r\n    }\r\n    if (d[0] == \"link\") {\r\n      o.renderCell = (params) => {\r\n        console.log(\"YYYY:\", params);\r\n        return (\r\n          <div\r\n            style={{\r\n              overflow: \"auto\",\r\n              lineHeight: \"160%\",\r\n              padding: 0,\r\n            }}\r\n          >\r\n            <a href={params.value}>{params.row.name}</a>\r\n          </div>\r\n        );\r\n      };\r\n    } else {\r\n      o.renderCell = (params) => {\r\n        console.log(\"YYYYY:\", params);\r\n        return (\r\n          <div\r\n            style={{\r\n              overflow: \"auto\",\r\n              lineHeight: \"160%\",\r\n              padding: 0,\r\n            }}\r\n          >\r\n            {typeof params.value == \"object\" && params.value != null\r\n              ? params.value.toString()\r\n              : params.value}\r\n          </div>\r\n        );\r\n      };\r\n    }\r\n    return o;\r\n  });\r\n\r\n  return (\r\n    <div style={{ height: 480, width: \"100%\" }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        components={{\r\n          Toolbar: GridToolbar,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction areEqual(prevProps, nextProps) {\r\n  console.log(\"Render: is data changed:\", prevProps == nextProps);\r\n  return prevProps == nextProps;\r\n}\r\n\r\n// export default (() => {\r\n//   console.log(\"Test Memo\");\r\n//   return React.memo(WinnersByTable, areEqual);\r\n// })();\r\nexport default WinnersByTable;\r\n","import { Grid } from \"@mui/material\";\r\nimport { useMemo } from \"react\";\r\nimport WinnersByCountry from \"./Charts/WinnersByCountry\";\r\nimport WinnersByRadio from \"./Charts/WinnersByRadio\";\r\nimport WinnersByCategory from \"./Charts/WinnersByCategory\";\r\nimport WinnersByYear from \"./Charts/WinnersByYear\";\r\nimport WinnersByTable from \"./Charts/WinnersByTable\";\r\n\r\nconst buildScatter = (data) => {\r\n  console.log(\"build ScatterChart:\", data);\r\n  return (\r\n    <Grid item width={\"100%\"}>\r\n      <WinnersByCategory data={data} />\r\n    </Grid>\r\n  );\r\n};\r\n// sx={{ xs: 12, sm: 12, md: 12, lg: 4, xl: 4 }}\r\nconst buildBarchartAndPieChart = (data) => {\r\n  console.log(\"build barchart\");\r\n  return (\r\n    <>\r\n      <Grid\r\n        item\r\n        sx={{\r\n          width: { xs: \"100%\", sm: \"100%\", md: \"100%\", lg: \"75%\", xl: \"75%\" },\r\n          maxWidth: {\r\n            xs: \"100%\",\r\n            sm: \"100%\",\r\n            md: \"100%\",\r\n            lg: \"75%\",\r\n            xl: \"75%\",\r\n          },\r\n        }}\r\n      >\r\n        <WinnersByCountry\r\n          data={data}\r\n          xDataKey={\"countryId\"}\r\n          xDataType={\"number\"}\r\n          barDataKey={\"number\"}\r\n          barDataType={\"number\"}\r\n          beginYear={data.year[0]}\r\n          endYear={data.year[1]}\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        sx={{\r\n          width: { xs: \"100%\", sm: \"100%\", md: \"100%\", lg: \"25%\", xl: \"25%\" },\r\n          maxWidth: {\r\n            xs: \"100%\",\r\n            sm: \"100%\",\r\n            md: \"100%\",\r\n            lg: \"25%\",\r\n            xl: \"25%\",\r\n          },\r\n        }}\r\n      >\r\n        <WinnersByRadio\r\n          data={data}\r\n          dataKey={\"radio\"}\r\n          beginYear={data.year[0]}\r\n          endYear={data.year[1]}\r\n        ></WinnersByRadio>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nconst buildAreaChart = (data) => {\r\n  console.log(\"build AreaChart\");\r\n  return (\r\n    <Grid item width={\"100%\"}>\r\n      <WinnersByYear data={data} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst buildTableChart = (data) => {\r\n  console.log(\"build buildTableChart\");\r\n  return (\r\n    <Grid item width={\"100%\"}>\r\n      <WinnersByTable data={data} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport const NobelCharts = ({ data, selectedChart }) => {\r\n  console.log(\"NobelCharts render:\", data);\r\n  const scatterData = useMemo(() => buildScatter(data), [data]);\r\n  const barchartData = useMemo(() => buildBarchartAndPieChart(data), [data]);\r\n  const areachartData = useMemo(() => buildAreaChart(data), [data]);\r\n  const tablechartData = useMemo(() => buildTableChart(data), [data]);\r\n\r\n  const buildNobelChart = () => {\r\n    const chartList = {\r\n      WinnersByCategory: scatterData,\r\n      WinnersByCountry: barchartData,\r\n      WinnersByYear: areachartData,\r\n      WinnersByTable: tablechartData,\r\n    };\r\n    return chartList[selectedChart];\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      columnSpacing={2}\r\n      rowSpacing={2}\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      wrap=\"wrap\"\r\n      marginTop={2}\r\n    >\r\n      {buildNobelChart()}\r\n    </Grid>\r\n  );\r\n};\r\n","import { useEffect, useState, useCallback } from \"react\";\r\nimport * as React from \"react\";\r\nimport { fetchData, ChartDataUtil } from \"../dataUtil\";\r\nimport * as d3 from \"d3\";\r\nimport MenuFilters from \"./MenuFilters\";\r\nimport MenuCharts from \"./MenuCharts\";\r\nimport { NobelCharts } from \"./NobelCharts\";\r\n\r\nconst _ = require(\"lodash\");\r\nconst dataURL =\r\n  \"https://gist.githubusercontent.com/idatatalks/8612a9f89c444b82728473a545813789/raw/nobel_winners_cleaned.csv\";\r\n\r\n// const dataURL = \"nobel_winners_cleaned.csv\";\r\n\r\nexport const NobelApp = (props) => {\r\n  const [{ data, isDataLoaded }, setData] = useState({\r\n    data: null,\r\n    isDataLoaded: false,\r\n  });\r\n  const [chart, setChart] = useState(\"WinnersByCountry\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"Data fetch start\");\r\n    fetchData(dataURL)\r\n      .then((rawData) => {\r\n        console.log(\"Data parse start, rawData:\", rawData);\r\n        rawData = d3.csvParse(rawData, d3.autoType);\r\n        const data = new ChartDataUtil(rawData);\r\n        setData({ data, isDataLoaded: true });\r\n        console.log(\"Data parse end!\");\r\n      })\r\n      .catch((error) => console.log(\"Data fetch failed due to => \", error));\r\n    console.log(\"Data fetch end!\");\r\n  }, []);\r\n\r\n  const handleFilterChange = useCallback(\r\n    (filters) => {\r\n      setData({ data: _.clone(data.filterData(filters)), isDataLoaded: true });\r\n    },\r\n    [data]\r\n  );\r\n\r\n  const handleMenuCharts = useCallback((newChart) => {\r\n    console.log(\"Chart:\", newChart, \" is selected.\");\r\n    setChart(newChart);\r\n  }, []);\r\n\r\n  console.log(\"NobelApp rendering:\", data, \" active chart:\", chart);\r\n\r\n  if (!isDataLoaded) {\r\n    return <h1>Loading data...... please be patient or try again!</h1>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MenuFilters data={data} onSetFilter={handleFilterChange} />\r\n      <MenuCharts selection={chart} onSetSelection={handleMenuCharts} />\r\n      <NobelCharts data={data.filteredData} selectedChart={chart} />\r\n    </>\r\n  );\r\n};\r\n","import { StrictMode } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { NobelApp } from \"./components/NobelApp\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\n\r\nReactDOM.render(\r\n  <NobelApp />,\r\n\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}