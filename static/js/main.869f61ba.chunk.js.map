{"version":3,"sources":["styles.module.css","App.js","dataUtil.js","components/MenuFiltersItems/FilterSelect.jsx","components/MenuFiltersItems/FilterSlide.jsx","components/MenuFilters.jsx","components/MenuCharts.jsx","components/Charts/WinnersByCountry.jsx","components/Charts/WinnersByRadio.jsx","components/Charts/WinnersByCategory.jsx","components/Charts/WinnersByYear.jsx","components/Charts/WinnersByTable.jsx","components/NobelCharts.jsx","components/NobelApp.jsx","index.js"],"names":["module","exports","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","COLOR_TITLE","COLOR_PALETTE","ChartDataUtil","constructor","data","this","_data","_initOptions","_initFilters","filterData","options","_options","filters","_filters","filteredData","_filteredData","prototype","countries","Array","from","d3","d","country","keys","sort","categories","category","years","year","a","b","genders","len","length","gender","v","d1","d2","slice","map","concat","_buildChartData","winnersByCountry","maxWinners","sumWinners","k","countryNum","console","log","filter","find","item","toLowerCase","getNumByCountry","i","number","countryId","_","require","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","FilterSelect","label","defaultOptions","onSetFilter","sx","selectedOptions","setSelectedOptions","useState","labelId","selectId","setCtrlId","uniqueId","FormControl","InputLabel","id","Select","multiple","value","onChange","event","target","newValue","split","input","OutlinedInput","renderValue","selected","join","fontSize","fontWeight","option","MenuItem","Checkbox","checked","includes","ListItemText","primary","FilterSlide","props","range","min","max","setValue","Paper","elevation","textAlign","pt","px","Slider","defaultValue","onChangeCommitted","valueLabelDisplay","step","marks","disableSwap","mt","MenuFilters","commonConfig","maxWidth","arrLenOfYear","Grid","container","direction","columnSpacing","rowSpacing","justifyContent","alignItems","wrap","xs","sm","md","lg","xl","React","chartList","text","MenuCharts","selection","onSetSelection","marginTop","ToggleButtonGroup","root","color","exclusive","newSelection","textTransform","flexWrap","index","ToggleButton","classes","border","boxShadow","m","p","margins","top","right","bottom","left","WinnersByCountry","xDataKey","xDataType","barDataKey","barDataType","beginYear","endYear","minWidth","ResponsiveContainer","height","BarChart","margin","dataKey","tick","CustomizedAxisTick","tickLine","axisLine","allowDataOverflow","interval","hide","content","CustomTooltip","Legend","align","verticalAlign","wrapperStyle","paddingTop","Bar","name","fill","legendType","LabelList","position","entry","Cell","x","y","payload","transform","dx","dy","textAnchor","active","Math","PI","WinnersByRadio","filterDataByRadio","minHeight","PieChart","Pie","cx","cy","outerRadius","renderCustomizedLabel","contentStyle","backgroundColor","borderRadius","paddingBottom","paddingLeft","paddingRight","allowEscapeViewBox","CustomLegend","midAngle","innerRadius","percent","dominantBaseline","toFixed","radio","minRadio","sum","reduce","forEach","getRadioByCountry","totalNum","acc","c","othersRadio","totalFilteredNum","push","mark","horPaddings","vertPaddings","WinnersByCategory","dataPerYear","sortedData","yearNum","buildData","chartHeight","xAxisWidth","overflow","ScatterChart","strokeDasharray","allowDuplicatedCategory","type","domain","tickCount","angle","minTickGap","tickMargin","padding","verticalAnchor","ZAxis","layout","cursor","categoryData","Scatter","shape","indexOf","memo","WinnersByYear","o","obj","Object","fromEntries","hasOwnProperty","AreaChart","iconType","Area","stackId","stroke","WinnersByTable","rows","columns","entries","field","headerName","fluid","renderCell","params","lineHeight","href","row","toString","components","Toolbar","GridToolbar","NobelCharts","selectedChart","scatterData","useMemo","buildScatter","barchartData","buildBarchartAndPieChart","areachartData","buildAreaChart","tablechartData","buildTableChart","NobelApp","isDataLoaded","setData","chart","setChart","useEffect","async","url","fetch","then","response","ok","Error","statusText","catch","error","fetchData","rawData","handleFilterChange","useCallback","clone","handleMenuCharts","newChart","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.869f61ba.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"styles_App__1QDQB\",\"ScatterPlot\":\"styles_ScatterPlot__2XZuw\",\"recharts-responsive-container\":\"styles_recharts-responsive-container__3KPgH\",\"MyToggleButton\":\"styles_MyToggleButton__3f7XW\",\"MuiToggleButtonGroup-grouped\":\"styles_MuiToggleButtonGroup-grouped__Gve37\"};","import {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from \"recharts\";\nimport \"./styles.module.css\";\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nconst data = [{ name: \"Page A\", uv: 400, pv: 2400, amt: 2400 }];\n\nconst renderLineChart = (\n  <LineChart width={600} height={300} data={data}>\n    <Line\n      type=\"monotone\"\n      dataKey=\"pv\"\n      stroke=\"#8884d8\"\n      margin={{ top: 50, right: 20, bottom: 5, left: 200 }}\n    />\n    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"10 5\" />\n    <XAxis dataKey=\"name\" />\n    <YAxis />\n    <Tooltip />\n  </LineChart>\n);\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Nobel Prize All In One</h1>\n      {/* {renderLineChart} */}\n    </div>\n  );\n}\n","import * as d3 from \"d3\";\r\n\r\nexport const COLOR_TITLE = \"#666\";\r\nexport const COLOR_PALETTE = [\r\n  \"#0cc0aa\",\r\n  \"#4787c9\",\r\n  \"#fb0998\",\r\n  \"#59a20c\",\r\n  \"#7c08c5\",\r\n  \"#e0c645\",\r\n  \"#715cb6\",\r\n  \"#ef972d\",\r\n  \"#a57a6a\",\r\n  \"#c6c0fe\",\r\n  \"#ec9bfa\",\r\n  \"#421674\",\r\n  \"#b3e467\",\r\n  \"#5c190c\",\r\n  \"#55f17b\",\r\n  \"#c25357\",\r\n  \"#b9dcca\",\r\n  \"#29403b\",\r\n  \"#f4b8ab\",\r\n  \"#6a8b7b\",\r\n];\r\n\r\nexport async function fetchData(url) {\r\n  console.log(\"URL:\", url);\r\n  const data = await fetch(url)\r\n    .then((response) => {\r\n      if (!response.ok) throw new Error(response.statusText);\r\n      return response.text();\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(\"Data fetch complete!\");\r\n  return data;\r\n  // try {\r\n  //   let response = await fetch(url);\r\n  //   if (!response.ok) {\r\n  //     throw new Error(response.statusText);\r\n  //   }\r\n  //   let text = await response.text();\r\n  //   // console.log(text);\r\n  //   return text;\r\n  // } catch (error) {\r\n  //   console.log(\"handleError:\", error);\r\n  //   throw error;\r\n  // }\r\n}\r\n\r\nexport class ChartDataUtil {\r\n  constructor(data) {\r\n    this._data = data;\r\n    this._initOptions();\r\n    this._initFilters();\r\n    this.filterData();\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get filters() {\r\n    return this._filters;\r\n  }\r\n\r\n  get filteredData() {\r\n    return this._filteredData;\r\n  }\r\n}\r\n\r\nChartDataUtil.prototype._initOptions = function () {\r\n  this._options = {};\r\n  this._options.countries = Array.from(\r\n    d3.group(this._data, (d) => d.country).keys()\r\n  ).sort();\r\n  this._options.categories = Array.from(\r\n    d3.group(this._data, (d) => d.category).keys()\r\n  );\r\n  this._options.years = Array.from(\r\n    d3.group(this._data, (d) => d.year).keys()\r\n  ).sort((a, b) => a - b);\r\n  this._options.genders = [\"Male\", \"Female\"];\r\n};\r\n\r\nChartDataUtil.prototype._initFilters = function () {\r\n  const len = this._options.years.length - 1;\r\n  this._filters = {};\r\n  this._filters.category = [...this._options.categories];\r\n  this._filters.gender = [...this._options.genders];\r\n  this._filters.country = d3\r\n    .rollups(\r\n      this._data,\r\n      (v) => v.length,\r\n      (d) => d.country\r\n    )\r\n    .sort((d1, d2) => d3.descending(d1[1], d2[1]))\r\n    .slice(0, 10)\r\n    .map((d) => d[0])\r\n    .concat([\"China\", \"India\"]);\r\n  this._filters.year = [this._options.years[0], this._options.years[len]];\r\n};\r\n\r\nChartDataUtil.prototype._buildChartData = function () {\r\n  this._filteredData.winnersByCountry = d3\r\n    .flatRollup(\r\n      this._filteredData,\r\n      (v) => v.length,\r\n      (d) => d.country\r\n    )\r\n    .sort((a, b) => d3.descending(a[1], b[1]));\r\n\r\n  this._filteredData.maxWinners = this._filteredData.winnersByCountry[0];\r\n  this._filteredData.sumWinners = d3.sum(\r\n    this._filteredData.winnersByCountry,\r\n    ([k, v]) => v\r\n  );\r\n  this._filteredData.countryNum = this._filteredData.winnersByCountry.length;\r\n  this._filteredData.year = this._filters.year;\r\n  this._filteredData.categories = this._filters.category;\r\n};\r\n\r\nChartDataUtil.prototype.filterData = function (filters = null) {\r\n  if (filters) this._filters = filters;\r\n  console.log(\"Before filter, filters:\", filters);\r\n  console.log(\"Before filter, data:\", this);\r\n  this._filteredData = this._data.filter(\r\n    (d) =>\r\n      d.year >= this._filters.year[0] &&\r\n      d.year <= this._filters.year[1] &&\r\n      this._filters.country.find(\r\n        (item) => item.toLowerCase() == d.country.toLowerCase()\r\n      ) &&\r\n      this._filters.category.find(\r\n        (item) => item.toLowerCase() == d.category.toLowerCase()\r\n      ) &&\r\n      this._filters.gender.find(\r\n        (item) => item.toLowerCase() == d.gender.toLowerCase()\r\n      )\r\n  );\r\n\r\n  this._buildChartData();\r\n  console.log(\"After filter, data:\", this);\r\n  return this;\r\n};\r\n\r\nexport const getNumByCountry = (filter) => {\r\n  return filter.winnersByCountry.map((d, i) => ({\r\n    country: d[0],\r\n    number: d[1],\r\n    countryId: i + 1,\r\n  }));\r\n};\r\n\r\nexport const getRadioByCountry = (data) => {\r\n  let sum = data.reduce((sum, d) => sum + d.number, 0);\r\n  data.forEach((d) => {\r\n    d.radio = (d.number * 100) / sum;\r\n    // d.radio = `${((d.number * 100) / sum).toFixed(0)}%`;\r\n  });\r\n  return data;\r\n};\r\n","import { useState } from \"react\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Select from \"@mui/material/Select\";\nimport Checkbox from \"@mui/material/Checkbox\";\n\nconst _ = require(\"lodash\");\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nexport const FilterSelect = ({\n  data,\n  label,\n  options,\n  defaultOptions,\n  onSetFilter,\n  sx,\n}) => {\n  console.log(\"label:\", label);\n  const [selectedOptions, setSelectedOptions] = useState(defaultOptions);\n  const [[labelId, selectId], setCtrlId] = useState([\n    _.uniqueId(label + \"_id_\"),\n    _.uniqueId(label + \"_select_\"),\n  ]);\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    const newValue = typeof value === \"string\" ? value.split(\",\") : value;\n    setSelectedOptions(\n      // On autofill we get a the stringified value.\n      newValue\n    );\n    console.log(\"new filter:\", {\n      ...data.filters,\n      [label.toLowerCase()]: newValue,\n    });\n    onSetFilter({ ...data.filters, [label.toLowerCase()]: newValue });\n  };\n  return (\n    <>\n      <FormControl sx={{ ...sx }}>\n        <InputLabel id={labelId}>{label}</InputLabel>\n        <Select\n          labelId={labelId}\n          id={selectId}\n          multiple\n          value={selectedOptions}\n          onChange={handleChange}\n          input={<OutlinedInput label={label} />}\n          renderValue={(selected) => selected.join(\", \")}\n          MenuProps={MenuProps}\n          sx={{ fontSize: \"small\", fontWeight: 200 }}\n        >\n          {options.map((option) => (\n            <MenuItem key={option} value={option} sx={{ fontSize: \"small\" }}>\n              <Checkbox checked={selectedOptions.includes(option)} />\n              <ListItemText primary={option} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </>\n  );\n};\n","import { Paper, Slider } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport function FilterSlide(props) {\n  const { range, onSetFilter, data, min, max } = props;\n  const [value, setValue] = useState(range);\n  const handleSliderChange = (event, newValue) => {\n    console.log(\"On Slider Change:\", newValue);\n    setValue(newValue);\n  };\n  const handleSliderCommitChange = (event, newValue) => {\n    console.log(\"On Slider Commit Change:\", newValue);\n    onSetFilter({ ...data.filters, year: newValue });\n  };\n\n  return (\n    <Paper\n      elevation={10}\n      sx={{\n        textAlign: \"center\",\n        pt: 2,\n        px: 3,\n      }}\n    >\n      <Slider\n        defaultValue={range}\n        value={value}\n        onChange={handleSliderChange}\n        onChangeCommitted={handleSliderCommitChange}\n        valueLabelDisplay=\"on\"\n        min={min}\n        max={max}\n        step={1}\n        marks\n        disableSwap\n        sx={{ mt: 0 }}\n      ></Slider>\n    </Paper>\n  );\n}\n","import { Grid } from \"@mui/material\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { FilterSelect } from \"./MenuFiltersItems/FilterSelect\";\nimport { FilterSlide } from \"./MenuFiltersItems/FilterSlide\";\n\nconst MenuFilters = ({ data, onSetFilter }) => {\n  console.log(\"Menu rendering\");\n  const commonConfig = {\n    data,\n    onSetFilter,\n    sx: { width: \"100%\", maxWidth: \"100%\" },\n  };\n  const arrLenOfYear = data.options.years.length - 1;\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      columnSpacing={2}\n      rowSpacing={1}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      wrap=\"wrap\"\n      mt={1}\n    >\n      <Grid item xs={8} sm={4} md={4} lg={2} xl={2}>\n        <FilterSelect\n          {...{\n            ...commonConfig,\n            label: \"Category\",\n            options: data.options.categories,\n            defaultOptions: data.filters.category,\n          }}\n        />\n      </Grid>\n      <Grid item xs={4} sm={2} md={2} lg={1} xl={1}>\n        <FilterSelect\n          {...{\n            ...commonConfig,\n            label: \"Gender\",\n            options: data.options.genders,\n            defaultOptions: data.filters.gender,\n          }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={6} md={6} lg={3} xl={3}>\n        <FilterSelect\n          {...{\n            ...commonConfig,\n            label: \"Country\",\n            options: data.options.countries,\n            defaultOptions: data.filters.country,\n          }}\n        />\n      </Grid>\n      <Grid item xs={12} sm={10} md={10} lg={6} xl={6}>\n        <FilterSlide\n          {...{\n            ...commonConfig,\n            range: data.filters.year,\n            min: data.options.years[0],\n            max: data.options.years[arrLenOfYear],\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default React.memo(MenuFilters);\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\n\nconst chartList = [\n  { value: \"WinnersByCountry\", text: \"Winners By Country\" },\n  { value: \"WinnersByCategory\", text: \"Winners By Category\" },\n  { value: \"WinnersByYear\", text: \"Winners By Year\" },\n  { value: \"WinnersByTable\", text: \"Winners By Table\" },\n];\n\nfunction MenuCharts({ selection, onSetSelection }) {\n  console.log(\"MenuCharts render\");\n  const handleSelection = (event, newSelection) => {\n    console.log(\"handleSelection newSelection:\", newSelection);\n    if (newSelection) onSetSelection(newSelection);\n  };\n\n  return (\n    <div style={{ textAlign: \"center\", marginTop: 10 }}>\n      <ToggleButtonGroup\n        root\n        color=\"primary\"\n        value={selection}\n        exclusive\n        onChange={handleSelection}\n        sx={{\n          textTransform: \"none\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        {chartList.map((item, index) => (\n          <ToggleButton\n            key={index}\n            value={item.value}\n            classes={{ root: { border: \"2px solid yellow\" } }}\n            sx={{\n              boxShadow: 2,\n              textTransform: \"none\",\n              fontSize: \"large\",\n              m: 0,\n              p: 1,\n            }}\n          >\n            {item.text}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </div>\n  );\n}\n\nexport default React.memo(MenuCharts);\n","import * as React from \"react\";\nimport {\n  BarChart,\n  Cell,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n  ResponsiveContainer,\n  LabelList,\n} from \"recharts\";\n\nimport { getNumByCountry, COLOR_TITLE, COLOR_PALETTE } from \"../../dataUtil\";\n\nconst margins = {\n  top: 80,\n  right: 5,\n  bottom: 100,\n  left: 30,\n};\nconst minXTickGap = 50;\n\nexport const WinnersByCountry = ({\n  data,\n  xDataKey,\n  xDataType,\n  barDataKey,\n  barDataType,\n  beginYear,\n  endYear,\n}) => {\n  console.log(\"WinnersByCountry render\");\n  data = getNumByCountry(data);\n  console.log(\"WinnersByCountry barchartData:\", data);\n\n  const minWidth = data.length * minXTickGap;\n  console.log(\"WinnersByCountry minWidth:\", minWidth);\n  return (\n    <>\n      <ResponsiveContainer width={\"100%\"} minWidth={minWidth} height={600}>\n        <BarChart data={data} margin={margins}>\n          <XAxis\n            dataKey={xDataKey}\n            tick={<CustomizedAxisTick data={data} />}\n            tickLine={false}\n            axisLine={false}\n            allowDataOverflow={false}\n            interval={0}\n            fontSize={20}\n          />\n          <YAxis hide={true} axisLine={false} tickLine={false} />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend\n            align=\"center\"\n            verticalAlign=\"middle\"\n            height={36}\n            wrapperStyle={{ top: 3, paddingTop: 2, fontSize: 20 }}\n          />\n          <Bar\n            name={`Nobel winners by country(${beginYear}~${endYear})`}\n            dataKey={barDataKey}\n            fill={COLOR_TITLE}\n            legendType=\"square\"\n            interval={30}\n          >\n            <LabelList dataKey={barDataKey} position=\"top\" />\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n              />\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nconst CustomizedAxisTick = (props) => {\n  const { x, y, payload, data, index } = props;\n  console.log(\"Render AxisTick props:\", props);\n  console.log(\"Payload value:\", data[payload.value - 1].country);\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dx={-5}\n        dy={0}\n        textAnchor=\"end\"\n        fill={COLOR_TITLE}\n        transform=\"rotate(-90)\"\n      >\n        {data[payload.value - 1].country}\n      </text>\n    </g>\n  );\n};\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  //Don't display tooltip, but remaining the animation effect of bar selection\n  return null;\n};\n\nexport default React.memo(WinnersByCountry);\n","import * as React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  getNumByCountry,\n  getRadioByCountry,\n  COLOR_TITLE,\n  COLOR_PALETTE,\n} from \"../../dataUtil\";\n\nconst RADIAN = Math.PI / 180;\nconst margins = {\n  top: 30,\n  right: 5,\n  bottom: 100,\n  left: 40,\n};\n\nconst WinnersByRadio = ({ data, dataKey, beginYear, endYear }) => {\n  console.log(\"WinnersByRadio render\");\n  const filteredData = filterDataByRadio(data, 5);\n  console.log(\"filtered pie data:\", filteredData);\n  return (\n    <ResponsiveContainer\n      width={\"100%\"}\n      minWidth={240}\n      height={600}\n      minHeight={500}\n    >\n      <PieChart margin={margins}>\n        <text\n          x={150}\n          y={30}\n          fill={COLOR_TITLE}\n          fontSize={20}\n          textAnchor=\"middle\"\n        >\n          Winners Percentage By Country\n          <tspan x={120} y={50}>\n            ({beginYear}~{endYear})\n          </tspan>\n        </text>\n        <Pie\n          data={filteredData}\n          dataKey={dataKey}\n          cx={120}\n          cy={150}\n          outerRadius={70}\n          fill=\"#8884d8\"\n          label={renderCustomizedLabel}\n        >\n          {filteredData.map((entry, index) => (\n            <Cell\n              key={`cell-${index}`}\n              fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n            />\n          ))}\n        </Pie>\n        <Tooltip\n          contentStyle={{\n            backgroundColor: \"#f7efd2\",\n            borderRadius: 10,\n            paddingTop: 2,\n            paddingBottom: 2,\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n          content={<CustomTooltip data={filteredData} />}\n          allowEscapeViewBox={{ x: false, y: false }}\n        />\n        <Legend content={<CustomLegend data={filteredData} />} />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst renderCustomizedLabel = (props) => {\n  const { x, y, cx, cy, midAngle, innerRadius, outerRadius, percent, index } =\n    props;\n  console.log(\"Pie label:\", props);\n\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"black\"\n      textAnchor={x > cx ? \"start\" : \"end\"}\n      dominantBaseline=\"central\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nconst CustomTooltip = (props) => {\n  const { data, active, payload, label, contentStyle } = props;\n  console.log(\"Pie tooltop:\", props);\n\n  if (active && payload && payload.length) {\n    const index = payload[0].name;\n    console.log(\"Pie index:\", index);\n    const { country, number, radio } = data[index];\n    return (\n      <div style={{ ...contentStyle, color: COLOR_TITLE }}>\n        <p>{`Percentage: ${radio.toFixed(0)}%`}</p>\n        <p>{`Number: ${number}`}</p>\n        <p>{`Country: ${country}`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst CustomLegend = (props) => {\n  const { data, payload } = props;\n  console.log(\"xxx legend:\", props);\n  return (\n    <ul style={{ marginTop: 20 }}>\n      {payload.map((entry, index) => (\n        <li\n          key={`item-${index}`}\n          style={{ color: COLOR_PALETTE[index % COLOR_PALETTE.length] }}\n        >\n          {data[entry.value].country}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst filterDataByRadio = (data, minRadio) => {\n  data = getNumByCountry(data);\n  console.log(\"barchartData:\", data);\n  data = getRadioByCountry(data);\n\n  console.log(\"XXXXXX, RAW data:\", data);\n  let totalNum = data.reduce((acc, c) => acc + c.number, 0);\n  console.log(\"XXXXXX, RAW data total num:\", totalNum);\n  let filteredData = data.filter((d) => d.radio >= minRadio);\n  console.log(\"XXXXXX, filtered data:\", filteredData);\n  let othersRadio = 100 - filteredData.reduce((acc, c) => acc + c.radio, 0);\n  let totalFilteredNum = filteredData.reduce((acc, c) => acc + c.number, 0);\n  filteredData.push({\n    country: \"Others\",\n    countryId: filteredData.length + 1,\n    number: totalNum - totalFilteredNum,\n    radio: othersRadio,\n  });\n  return filteredData;\n};\n\nexport default React.memo(WinnersByRadio);\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { COLOR_TITLE, COLOR_PALETTE } from \"../../dataUtil\";\nimport {\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Scatter,\n  Cell,\n  ScatterChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ZAxis,\n} from \"recharts\";\n\nconst mark = {\n  size: 10,\n  width: 10,\n  height: 15,\n};\n\nconst horizontalGap = 10;\nconst margins = {\n  top: 20,\n  right: 20,\n  bottom: 30,\n  left: 0,\n};\nconst horPaddings = { left: 10, right: 20 };\nconst vertPaddings = { top: 10, bottom: 10 };\n\nconst buildData = (data) => {\n  const sortedData = [...data].sort(\n    (a, b) =>\n      d3.ascending(a.year, b.year) || d3.ascending(a.category, b.category)\n  );\n  console.log(\"XXXXX dataPerYear1:\", sortedData);\n  console.log(\"XXXXX dataPerYear1:\", data);\n  const dataPerYear = d3.flatGroup(sortedData, (d) => d.year);\n\n  dataPerYear.forEach(([year, data]) => {\n    data.forEach((d, i) => {\n      d.index = i + 1;\n    });\n  });\n  console.log(\"XXXXX sorted category:\", data.categories.slice().sort());\n  sortedData.maxWinners = d3.max(dataPerYear, (d) => d[1].length);\n  sortedData.yearNum =\n    sortedData[sortedData.length - 1].year - sortedData[0].year + 1;\n  console.log(\"XXXXX dataPerYear2:\", dataPerYear);\n  console.log(\"XXXXX sorted data:\", sortedData);\n  return [sortedData, data.categories.slice().sort()];\n};\n\nconst WinnersByCategory = (props) => {\n  console.log(\"WinnersByCategory render!\");\n  const { data } = props;\n  const [dataPerYear, categories] = buildData(data);\n\n  const chartHeight =\n    mark.height * 1.2 * dataPerYear.maxWinners +\n    margins.top +\n    margins.bottom +\n    vertPaddings.top +\n    vertPaddings.bottom;\n\n  const xAxisWidth =\n    dataPerYear.yearNum * 20 +\n    horPaddings.left +\n    horPaddings.right +\n    margins.left +\n    margins.right;\n\n  console.log(\n    \"WinnersByCategory Chart height:\",\n    chartHeight,\n    \" xAxisWidth:\",\n    xAxisWidth\n  );\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: chartHeight + 20,\n        overflow: \"auto\",\n      }}\n    >\n      <ScatterChart\n        margin={margins}\n        width={xAxisWidth}\n        height={chartHeight}\n        minHeight={400}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          allowDuplicatedCategory={false}\n          dataKey={\"year\"}\n          type={\"number\"}\n          name={\"year\"}\n          domain={[\"dataMin\", \"dataMax\"]}\n          interval={0}\n          tickCount={dataPerYear.yearNum / 2 + 1}\n          angle={-90}\n          minTickGap={20}\n          tickMargin={25}\n          padding={horPaddings}\n          tick={{\n            textAnchor: \"middle\",\n            verticalAnchor: \"end\",\n            dx: -3,\n          }}\n          allowDataOverflow={true}\n        />\n        <YAxis\n          dataKey={\"index\"}\n          type={\"number\"}\n          name={\"WinnerCount\"}\n          interval={0}\n          tickCount={dataPerYear.maxWinners}\n          domain={[\"dataMin\", \"dataMax+2\"]}\n          padding={vertPaddings}\n        />\n        <ZAxis type=\"number\" range={[100, 100]} />\n        <Legend\n          layout=\"horizontal\"\n          align=\"left\"\n          verticalAlign=\"top\"\n          wrapperStyle={{\n            paddingLeft: 60,\n            paddingBottom: 10,\n            width: \"50%\",\n          }}\n        />\n        <Tooltip\n          cursor={{ strokeDasharray: \"3 3\" }}\n          contentStyle={{\n            backgroundColor: \"#f7efd2\",\n            borderRadius: 10,\n            paddingTop: 2,\n            paddingBottom: 2,\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n          content={<CustomTooltip categories={categories} />}\n          allowEscapeViewBox={{ x: false, y: false }}\n        />\n        {categories.map((category, index) => {\n          const categoryData = dataPerYear.filter(\n            (d) => d.category == category\n          );\n          console.log(\"fff category:\", categoryData);\n          return (\n            <Scatter\n              shape=\"circle\"\n              legendType=\"circle\"\n              name={category}\n              data={categoryData}\n              fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n            >\n              {categoryData.map((entry, i) => (\n                <Cell\n                  key={`cell-${i}`}\n                  fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n                />\n              ))}\n            </Scatter>\n          );\n        })}\n      </ScatterChart>\n    </div>\n  );\n};\n\nconst CustomTooltip = (props) => {\n  const { active, payload, label, contentStyle, categories } = props;\n  if (active && payload && payload.length) {\n    console.log(\"Scatter tooltop:\", props);\n    const { year, country, category, name } = payload[0].payload;\n    const index = categories.indexOf(category);\n    const color = COLOR_PALETTE[index % COLOR_PALETTE.length];\n    console.log(\"index:\", index);\n    console.log(\"categories:\", category);\n    return (\n      <div style={{ ...contentStyle, color: color }}>\n        <p>{`Year:${year}`}</p>\n        <p>{`Category:${category}`}</p>\n        <p>{`Country:${country}`}</p>\n        <p>{`Name:${name}`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default React.memo(WinnersByCategory);\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { COLOR_TITLE, COLOR_PALETTE } from \"../../dataUtil\";\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Area,\n  Legend,\n} from \"recharts\";\nimport * as d3 from \"d3\";\n\nconst buildData = (data) => {\n  const countries = data.winnersByCountry.map((d) => d[0]);\n  console.log(\"XXXXX country:\", countries);\n  console.log(\"XXXXX data:\", data);\n  let sortedData = d3\n    .flatRollup(\n      [...data],\n      (v) => v.length,\n      (d) => d.year,\n      (d) => d.country\n    )\n    .sort((a, b) => d3.ascending(a[0], b[0]) || d3.ascending(a[1], b[1]));\n\n  sortedData = d3\n    .flatGroup(sortedData, (d) => d[0])\n    .map((d) => [d[0], d[1].map((d) => [d[1], d[2]])]);\n  console.log(\"XXXXX sortedData1:\", sortedData);\n\n  sortedData = sortedData.map((d) => {\n    const o = { year: d[0] };\n    countries.forEach((c) => {\n      const obj = Object.fromEntries(d[1]);\n      // console.log(\"XXXX: obj:\", obj);\n      obj.hasOwnProperty(c) ? (o[c] = obj[c]) : (o[c] = 0);\n    });\n    return o;\n  });\n  console.log(\"XXXXX sortedData2:\", sortedData);\n  sortedData.countries = countries;\n  sortedData.yearNum =\n    sortedData[sortedData.length - 1].year - sortedData[0].year + 1;\n  console.log(\"XXXXX sorted data:\", sortedData);\n  return sortedData;\n};\n\nconst WinnersByYear = ({ data }) => {\n  console.log(\"WinnersByYear render, data:\", data);\n  data = buildData(data);\n\n  const horizontalGap = 10;\n  const margins = {\n    top: 20,\n    right: 100,\n    bottom: 30,\n    left: 30,\n  };\n  const horPaddings = { left: 10, right: 20 };\n  const vertPaddings = { top: 10, bottom: 10 };\n\n  const chartHeight =\n    400 + margins.top + margins.bottom + vertPaddings.top + vertPaddings.bottom;\n\n  const xAxisWidth =\n    data.yearNum * 20 +\n    horPaddings.left +\n    horPaddings.right +\n    margins.left +\n    margins.right;\n\n  console.log(\"XXX Chart height:\", chartHeight);\n  console.log(\"XXX xAxisWidth:\", xAxisWidth);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: chartHeight + 20,\n        overflow: \"auto\",\n      }}\n    >\n      <AreaChart\n        data={data}\n        margin={margins}\n        width={xAxisWidth}\n        height={chartHeight}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          allowDuplicatedCategory={false}\n          dataKey={\"year\"}\n          type={\"number\"}\n          name={\"year\"}\n          domain={[\"dataMin\", \"dataMax\"]}\n          interval={0}\n          tickCount={data.yearNum / 2 + 1}\n          angle={-90}\n          minTickGap={20}\n          tickMargin={25}\n          padding={horPaddings}\n          tick={{\n            textAnchor: \"middle\",\n            verticalAnchor: \"end\",\n            dx: -3,\n          }}\n          allowDataOverflow={true}\n        />\n        <YAxis />\n        <Tooltip\n          contentStyle={{\n            backgroundColor: \"#f7efd2\",\n            borderRadius: 10,\n            paddingTop: 2,\n            paddingBottom: 2,\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n          content={<CustomTooltip />}\n          allowEscapeViewBox={{ x: false, y: false }}\n        />\n        <Legend\n          layout=\"horizontal\"\n          align=\"left\"\n          verticalAlign=\"top\"\n          iconType=\"rect\"\n          wrapperStyle={{\n            paddingLeft: 60,\n            paddingBottom: 10,\n            width: \"50%\",\n          }}\n        />\n        {data.countries.map((c, i) => (\n          <Area\n            key={i}\n            type=\"step\"\n            dataKey={c}\n            stackId=\"1\"\n            stroke={COLOR_PALETTE[i % COLOR_PALETTE.length]}\n            fill={COLOR_PALETTE[i % COLOR_PALETTE.length]}\n          />\n        ))}\n      </AreaChart>\n    </div>\n  );\n};\n\nconst CustomTooltip = (props) => {\n  const { active, payload, label, contentStyle } = props;\n  console.log(\"Area tooltop:\", props);\n\n  if (active && payload && payload.length) {\n    payload.filter((d) => d.value > 0);\n\n    return (\n      <div style={{ ...contentStyle }}>\n        <p style={{ color: COLOR_TITLE }}>{`Year:${label}`}</p>\n        {payload\n          .sort((a, b) => b.value - a.value)\n          .filter((d) => d.value > 0)\n          .map((d, i) => {\n            return (\n              <p\n                key={i}\n                style={{ color: d.fill }}\n              >{`${d.dataKey}:${d.value}`}</p>\n            );\n          })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default React.memo(WinnersByYear);\n","import * as React from \"react\";\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\nimport { Button } from \"@mui/material\";\n\nfunction WinnersByTable({ data }) {\n  console.log(\"WinnersByTable render:\", data);\n  const rows = data.map((d, i) => {\n    d.id = i;\n    return d;\n  });\n  console.log(\"WinnersByTable:\", data[0]);\n  const columns = Object.entries(data[0]).map((d) => {\n    let o = { field: d[0], headerName: d[0], width: 150, fluid: 1 };\n    if (d[0] == \"id\") {\n      o.hide = true;\n    }\n    if (d[0] == \"link\") {\n      o.renderCell = (params) => {\n        console.log(\"YYYY:\", params);\n        return (\n          <div\n            style={{\n              overflow: \"auto\",\n              lineHeight: \"160%\",\n              padding: 0,\n            }}\n          >\n            <a href={params.value}>{params.row.name}</a>\n          </div>\n        );\n      };\n    } else {\n      o.renderCell = (params) => {\n        console.log(\"YYYYY:\", params);\n        return (\n          <div\n            style={{\n              overflow: \"auto\",\n              lineHeight: \"160%\",\n              padding: 0,\n            }}\n          >\n            {typeof params.value == \"object\" && params.value != null\n              ? params.value.toString()\n              : params.value}\n          </div>\n        );\n      };\n    }\n    return o;\n  });\n\n  return (\n    <div style={{ height: 480, width: \"100%\" }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        components={{\n          Toolbar: GridToolbar,\n        }}\n      />\n    </div>\n  );\n}\n\nfunction areEqual(prevProps, nextProps) {\n  console.log(\"Render: is data changed:\", prevProps == nextProps);\n  return prevProps == nextProps;\n}\n\n// export default (() => {\n//   console.log(\"Test Memo\");\n//   return React.memo(WinnersByTable, areEqual);\n// })();\nexport default WinnersByTable;\n","import { Grid } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport WinnersByCountry from \"./Charts/WinnersByCountry\";\nimport WinnersByRadio from \"./Charts/WinnersByRadio\";\nimport WinnersByCategory from \"./Charts/WinnersByCategory\";\nimport WinnersByYear from \"./Charts/WinnersByYear\";\nimport WinnersByTable from \"./Charts/WinnersByTable\";\n\nconst buildScatter = (data) => {\n  console.log(\"build ScatterChart:\", data);\n  return (\n    <Grid item width={\"100%\"}>\n      <WinnersByCategory data={data} />\n    </Grid>\n  );\n};\n// sx={{ xs: 12, sm: 12, md: 12, lg: 4, xl: 4 }}\nconst buildBarchartAndPieChart = (data) => {\n  console.log(\"build barchart\");\n  return (\n    <>\n      <Grid\n        item\n        sx={{\n          width: { xs: \"100%\", sm: \"100%\", md: \"100%\", lg: \"75%\", xl: \"75%\" },\n          maxWidth: {\n            xs: \"100%\",\n            sm: \"100%\",\n            md: \"100%\",\n            lg: \"75%\",\n            xl: \"75%\",\n          },\n        }}\n      >\n        <WinnersByCountry\n          data={data}\n          xDataKey={\"countryId\"}\n          xDataType={\"number\"}\n          barDataKey={\"number\"}\n          barDataType={\"number\"}\n          beginYear={data.year[0]}\n          endYear={data.year[1]}\n        />\n      </Grid>\n      <Grid\n        item\n        sx={{\n          width: { xs: \"100%\", sm: \"100%\", md: \"100%\", lg: \"25%\", xl: \"25%\" },\n          maxWidth: {\n            xs: \"100%\",\n            sm: \"100%\",\n            md: \"100%\",\n            lg: \"25%\",\n            xl: \"25%\",\n          },\n        }}\n      >\n        <WinnersByRadio\n          data={data}\n          dataKey={\"radio\"}\n          beginYear={data.year[0]}\n          endYear={data.year[1]}\n        ></WinnersByRadio>\n      </Grid>\n    </>\n  );\n};\n\nconst buildAreaChart = (data) => {\n  console.log(\"build AreaChart\");\n  return (\n    <Grid item width={\"100%\"}>\n      <WinnersByYear data={data} />\n    </Grid>\n  );\n};\n\nconst buildTableChart = (data) => {\n  console.log(\"build buildTableChart\");\n  return (\n    <Grid item width={\"100%\"}>\n      <WinnersByTable data={data} />\n    </Grid>\n  );\n};\n\nexport const NobelCharts = ({ data, selectedChart }) => {\n  console.log(\"NobelCharts render:\", data);\n  const scatterData = useMemo(() => buildScatter(data), [data]);\n  const barchartData = useMemo(() => buildBarchartAndPieChart(data), [data]);\n  const areachartData = useMemo(() => buildAreaChart(data), [data]);\n  const tablechartData = useMemo(() => buildTableChart(data), [data]);\n\n  const buildNobelChart = () => {\n    const chartList = {\n      WinnersByCategory: scatterData,\n      WinnersByCountry: barchartData,\n      WinnersByYear: areachartData,\n      WinnersByTable: tablechartData,\n    };\n    return chartList[selectedChart];\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      columnSpacing={2}\n      rowSpacing={2}\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      wrap=\"wrap\"\n      marginTop={2}\n    >\n      {buildNobelChart()}\n    </Grid>\n  );\n};\n","import { useEffect, useState, useCallback } from \"react\";\r\nimport * as React from \"react\";\r\nimport { fetchData, ChartDataUtil } from \"../dataUtil\";\r\nimport * as d3 from \"d3\";\r\nimport MenuFilters from \"./MenuFilters\";\r\nimport MenuCharts from \"./MenuCharts\";\r\nimport { NobelCharts } from \"./NobelCharts\";\r\nimport \"../styles.module.css\";\r\nconst _ = require(\"lodash\");\r\n// const dataURL =\r\n//   \"https://gist.githubusercontent.com/idatatalks/8612a9f89c444b82728473a545813789/raw/nobel_winners_cleaned.csv\";\r\n\r\nconst dataURL = \"nobel_winners_cleaned.csv\";\r\n\r\nexport const NobelApp = (props) => {\r\n  const [{ data, isDataLoaded }, setData] = useState({\r\n    data: null,\r\n    isDataLoaded: false,\r\n  });\r\n  const [chart, setChart] = useState(\"WinnersByCountry\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"Data fetch start\");\r\n    fetchData(dataURL)\r\n      .then((rawData) => {\r\n        console.log(\"Data parse start, rawData:\", rawData);\r\n        rawData = d3.csvParse(rawData, d3.autoType);\r\n        const data = new ChartDataUtil(rawData);\r\n        setData({ data, isDataLoaded: true });\r\n        console.log(\"Data parse end!\");\r\n      })\r\n      .catch((error) => console.log(\"Data fetch failed due to => \", error));\r\n    console.log(\"Data fetch end!\");\r\n  }, []);\r\n\r\n  const handleFilterChange = useCallback(\r\n    (filters) => {\r\n      setData({ data: _.clone(data.filterData(filters)), isDataLoaded: true });\r\n    },\r\n    [data]\r\n  );\r\n\r\n  const handleMenuCharts = useCallback((newChart) => {\r\n    console.log(\"Chart:\", newChart, \" is selected.\");\r\n    setChart(newChart);\r\n  }, []);\r\n\r\n  console.log(\"NobelApp rendering:\", data, \" active chart:\", chart);\r\n\r\n  if (!isDataLoaded) {\r\n    return <h1>Loading data...... please be patient or try again!</h1>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MenuFilters data={data} onSetFilter={handleFilterChange} />\r\n      <MenuCharts selection={chart} onSetSelection={handleMenuCharts} />\r\n      <NobelCharts data={data.filteredData} selectedChart={chart} />\r\n    </>\r\n  );\r\n};\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { NobelApp } from \"./components/NobelApp\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <NobelApp />,\n\n  rootElement\n);\n"],"sourceRoot":""}