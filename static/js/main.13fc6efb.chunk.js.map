{"version":3,"sources":["App.js","dataUtil.js","components/MenuFiltersItems/FilterSelect.jsx","components/MenuFiltersItems/FilterSlide.jsx","components/MenuFilters.jsx","components/MenuCharts.jsx","components/Charts/WinnersByCountry.jsx","components/Charts/WinnersByRadio.jsx","components/Charts/WinnersByCategory.jsx","components/Charts/WinnersByYear.jsx","components/Charts/WinnersByTable.jsx","components/NobelCharts.jsx","components/NobelApp.jsx","index.js"],"names":["LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","COLOR_PALETTE","ChartDataUtil","constructor","data","this","_data","_initOptions","_initFilters","filterData","options","_options","filters","_filters","filteredData","_filteredData","prototype","countries","Array","from","d3","d","country","keys","sort","categories","category","years","year","a","b","genders","gender","v","length","d1","d2","slice","map","concat","at","_buildChartData","winnersByCountry","maxWinners","sumWinners","k","countryNum","console","log","filter","find","item","toLowerCase","getNumByCountry","i","number","countryId","_","require","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","width","FilterSelect","label","defaultOptions","onSetFilter","sx","selectedOptions","setSelectedOptions","useState","labelId","selectId","setCtrlId","uniqueId","FormControl","border","InputLabel","id","Select","multiple","value","onChange","event","target","newValue","split","classes","select","fontSize","margin","color","input","OutlinedInput","renderValue","selected","join","fontWeight","option","MenuItem","Checkbox","checked","includes","ListItemText","primary","FilterSlide","props","range","min","max","setValue","Paper","elevation","textAlign","pt","px","Slider","defaultValue","onChangeCommitted","valueLabelDisplay","step","marks","disableSwap","mt","MenuFilters","commonConfig","maxWidth","Grid","container","direction","columnSpacing","rowSpacing","justifyContent","alignItems","wrap","xs","sm","md","lg","xl","React","chartList","text","MenuCharts","selection","onSetSelection","marginTop","ToggleButtonGroup","exclusive","newSelection","textTransform","flexWrap","index","ToggleButton","margins","top","right","bottom","left","WinnersByCountry","xDataKey","xDataType","barDataKey","barDataType","beginYear","endYear","minWidth","ResponsiveContainer","height","BarChart","dataKey","tick","CustomizedAxisTick","tickLine","axisLine","allowDataOverflow","interval","hide","content","CustomTooltip","Legend","align","verticalAlign","wrapperStyle","paddingTop","Bar","name","fill","LabelList","position","entry","Cell","x","y","payload","transform","dx","dy","textAnchor","active","Math","PI","WinnersByRadio","filterDataByRadio","minHeight","PieChart","Pie","cx","cy","outerRadius","renderCustomizedLabel","contentStyle","backgroundColor","borderRadius","paddingBottom","paddingLeft","paddingRight","allowEscapeViewBox","CustomLegend","midAngle","innerRadius","percent","dominantBaseline","toFixed","radio","minRadio","sum","reduce","forEach","getRadioByCountry","totalNum","acc","c","othersRadio","totalFilteredNum","push","mark","horPaddings","vertPaddings","WinnersByCategory","dataPerYear","sortedData","yearNum","buildData","chartHeight","xAxisWidth","overflow","ScatterChart","strokeDasharray","allowDuplicatedCategory","type","domain","tickCount","angle","minTickGap","tickMargin","padding","verticalAnchor","stroke","ZAxis","layout","cursor","categoryData","Scatter","shape","legendType","memo","WinnersByYear","o","obj","Object","fromEntries","hasOwnProperty","AreaChart","iconType","Area","stackId","WinnersByTable","rows","columns","entries","field","headerName","fluid","renderCell","params","lineHeight","href","row","toString","components","Toolbar","GridToolbar","NobelCharts","selectedChart","scatterData","useMemo","buildScatter","barchartData","buildBarchartAndPieChart","areachartData","buildAreaChart","tablechartData","buildTableChart","NobelApp","isDataLoaded","setData","chart","setChart","useEffect","async","url","fetch","then","response","ok","Error","statusText","catch","error","fetchData","rawData","handleFilterChange","useCallback","clone","handleMenuCharts","newChart","rootElement","document","getElementById","ReactDOM","render"],"mappings":"oPAaGA,EAAA,EACEC,EAAA,EAMAC,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,EAAA,E,YCrBE,MAAMC,EAAgB,CAC3B,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WA6BK,MAAMC,EACXC,YAAYC,GACVC,KAAKC,MAAQF,EACbC,KAAKE,eACLF,KAAKG,eACLH,KAAKI,aAGHC,cACF,OAAOL,KAAKM,SAGVC,cACF,OAAOP,KAAKQ,SAGVC,mBACF,OAAOT,KAAKU,eAIhBb,EAAcc,UAAUT,aAAe,WACrCF,KAAKM,SAAW,GAChBN,KAAKM,SAASM,UAAYC,MAAMC,KAC9BC,IAASf,KAAKC,OAAQe,GAAMA,EAAEC,UAASC,QACvCC,OACFnB,KAAKM,SAASc,WAAaP,MAAMC,KAC/BC,IAASf,KAAKC,OAAQe,GAAMA,EAAEK,WAAUH,QAE1ClB,KAAKM,SAASgB,MAAQT,MAAMC,KAC1BC,IAASf,KAAKC,OAAQe,GAAMA,EAAEO,OAAML,QACpCC,MAAK,CAACK,EAAGC,IAAMD,EAAIC,IACrBzB,KAAKM,SAASoB,QAAU,CAAC,OAAQ,WAGnC7B,EAAcc,UAAUR,aAAe,WACrCH,KAAKQ,SAAW,GAChBR,KAAKQ,SAASa,SAAW,IAAIrB,KAAKM,SAASc,YAC3CpB,KAAKQ,SAASmB,OAAS,IAAI3B,KAAKM,SAASoB,SACzC1B,KAAKQ,SAASS,QAAUF,IAEpBf,KAAKC,OACJ2B,GAAMA,EAAEC,SACRb,GAAMA,EAAEC,UAEVE,MAAK,CAACW,EAAIC,IAAOhB,IAAce,EAAG,GAAIC,EAAG,MACzCC,MAAM,EAAG,IACTC,KAAKjB,GAAMA,EAAE,KACbkB,OAAO,CAAC,QAAS,UACpBlC,KAAKQ,SAASe,KAAO,CAACvB,KAAKM,SAASgB,MAAM,GAAItB,KAAKM,SAASgB,MAAMa,IAAI,KAGxEtC,EAAcc,UAAUyB,gBAAkB,WACxCpC,KAAKU,cAAc2B,iBAAmBtB,IAElCf,KAAKU,eACJkB,GAAMA,EAAEC,SACRb,GAAMA,EAAEC,UAEVE,MAAK,CAACK,EAAGC,IAAMV,IAAcS,EAAE,GAAIC,EAAE,MAExCzB,KAAKU,cAAc4B,WAAatC,KAAKU,cAAc2B,iBAAiB,GACpErC,KAAKU,cAAc6B,WAAaxB,IAC9Bf,KAAKU,cAAc2B,kBACnB,QAAEG,EAAGZ,GAAL,SAAYA,KAEd5B,KAAKU,cAAc+B,WAAazC,KAAKU,cAAc2B,iBAAiBR,OACpE7B,KAAKU,cAAca,KAAOvB,KAAKQ,SAASe,KACxCvB,KAAKU,cAAcU,WAAapB,KAAKQ,SAASa,UAGhDxB,EAAcc,UAAUP,WAAa,WAA2B,IAAjBG,EAAgB,uDAAN,KAqBvD,OApBIA,IAASP,KAAKQ,SAAWD,GAC7BmC,QAAQC,IAAI,0BAA2BpC,GACvCmC,QAAQC,IAAI,uBAAwB3C,MACpCA,KAAKU,cAAgBV,KAAKC,MAAM2C,QAC7B5B,GACCA,EAAEO,MAAQvB,KAAKQ,SAASe,KAAK,IAC7BP,EAAEO,MAAQvB,KAAKQ,SAASe,KAAK,IAC7BvB,KAAKQ,SAASS,QAAQ4B,MACnBC,GAASA,EAAKC,eAAiB/B,EAAEC,QAAQ8B,iBAE5C/C,KAAKQ,SAASa,SAASwB,MACpBC,GAASA,EAAKC,eAAiB/B,EAAEK,SAAS0B,iBAE7C/C,KAAKQ,SAASmB,OAAOkB,MAClBC,GAASA,EAAKC,eAAiB/B,EAAEW,OAAOoB,kBAI/C/C,KAAKoC,kBACLM,QAAQC,IAAI,sBAAuB3C,MAC5BA,MAGF,MAAMgD,EAAmBJ,GACvBA,EAAOP,iBAAiBJ,KAAI,CAACjB,EAAGiC,KAAJ,CACjChC,QAASD,EAAE,GACXkC,OAAQlC,EAAE,GACVmC,UAAWF,EAAI,M,2EC7InB,MAAMG,EAAIC,EAAQ,KAIZC,EAAY,CAChBC,WAAY,CACVC,MAAO,CACLC,UAAWC,IACXC,MAAO,OAKAC,EAAe,IAOrB,IAPsB,KAC3B7D,EAD2B,MAE3B8D,EAF2B,QAG3BxD,EAH2B,eAI3ByD,EAJ2B,YAK3BC,EAL2B,GAM3BC,GACI,EACJtB,QAAQC,IAAI,SAAUkB,GACtB,MAAOI,EAAiBC,GAAsBC,mBAASL,KAC/CM,EAASC,GAAWC,GAAaH,mBAAS,CAChDf,EAAEmB,SAASV,EAAQ,QACnBT,EAAEmB,SAASV,EAAQ,cAkBrB,OACE,mCACE,eAACW,EAAA,EAAD,CAAaR,GAAI,IAAKA,EAAIS,OAAQ,mBAAlC,UACE,cAACC,EAAA,EAAD,CAAYC,GAAIP,EAAhB,SAA0BP,IAC1B,cAACe,EAAA,EAAD,CACER,QAASA,EACTO,GAAIN,EACJQ,UAAQ,EACRC,MAAOb,EACPc,SAxBcC,IACpB,MACEC,QAAQ,MAAEH,IACRE,EACEE,EAA4B,kBAAVJ,EAAqBA,EAAMK,MAAM,KAAOL,EAChEZ,EAEEgB,GAEFxC,QAAQC,IAAI,cAAe,IACtB5C,EAAKQ,QACR,CAACsD,EAAMd,eAAgBmC,IAEzBnB,EAAY,IAAKhE,EAAKQ,QAAS,CAACsD,EAAMd,eAAgBmC,KAYhDE,QAAS,CACPC,OAAQ,CACNC,SAAU,QACVC,OAAQ,cACRd,OAAQ,iBACRe,MAAO,UAGXC,MAAO,cAACC,EAAA,EAAD,CAAe7B,MAAOA,IAC7B8B,YAAcC,GAAaA,EAASC,KAAK,MACzCvC,UAAWA,EACXU,GAAI,CAAEsB,SAAU,QAASQ,WAAY,KAjBvC,SAmBGzF,EAAQ4B,KAAK8D,GACZ,eAACC,EAAA,EAAD,CAEElB,MAAOiB,EACP/B,GAAI,CAAEsB,SAAU,QAASb,OAAQ,mBAHnC,UAKE,cAACwB,EAAA,EAAD,CAAUC,QAASjC,EAAgBkC,SAASJ,KAC5C,cAACK,EAAA,EAAD,CAAcC,QAASN,MALlBA,a,sBC1EZ,SAASO,EAAYC,GAC1B,MAAM,MAAEC,EAAF,YAASzC,EAAT,KAAsBhE,EAAtB,IAA4B0G,EAA5B,IAAiCC,GAAQH,GACxCzB,EAAO6B,GAAYxC,mBAASqC,GAUnC,OACE,cAACI,EAAA,EAAD,CACEC,UAAW,GACX7C,GAAI,CACFS,OAAQ,kBACRqC,UAAW,SACXC,GAAI,EACJC,GAAI,GANR,SASE,cAACC,EAAA,EAAD,CACEC,aAAcV,EACd1B,MAAOA,EACPC,SAtBqB,CAACC,EAAOE,KACjCxC,QAAQC,IAAI,oBAAqBuC,GACjCyB,EAASzB,IAqBLiC,kBAnB2B,CAACnC,EAAOE,KACvCxC,QAAQC,IAAI,2BAA4BuC,GACxCnB,EAAY,IAAKhE,EAAKQ,QAASgB,KAAM2D,KAkBjCkC,kBAAkB,KAClBX,IAAKA,EACLC,IAAKA,EACLW,KAAM,EACNC,OAAK,EACLC,aAAW,EACXvD,GAAI,CAAES,OAAQ,mBAAoB+C,GAAI,OC9B9C,MAAMC,EAAc,IAA4B,IAA3B,KAAE1H,EAAF,YAAQgE,GAAkB,EAC7CrB,QAAQC,IAAI,kBACZ,MAAM+E,EAAe,CACnB3H,OACAgE,cACAC,GAAI,CAAEL,MAAO,OAAQgE,SAAU,SAGjC,OACE,eAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,cAAe,EACfC,WAAY,EACZC,eAAe,SACfC,WAAW,SACXC,KAAK,OAPP,UASE,cAACP,EAAA,EAAD,CACE9E,MAAI,EACJsF,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJxE,GAAI,CAAES,OAAQ,iBAPhB,SASE,cAACb,EAAD,IAEO8D,EACH7D,MAAO,WACPxD,QAASN,EAAKM,QAAQe,WACtB0C,eAAgB/D,EAAKQ,QAAQc,aAInC,cAACuG,EAAA,EAAD,CACE9E,MAAI,EACJsF,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJxE,GAAI,CAAES,OAAQ,iBAPhB,SASE,cAACb,EAAD,IAEO8D,EACH7D,MAAO,SACPxD,QAASN,EAAKM,QAAQqB,QACtBoC,eAAgB/D,EAAKQ,QAAQoB,WAInC,cAACiG,EAAA,EAAD,CACE9E,MAAI,EACJsF,GAAI,GACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJC,GAAI,EACJxE,GAAI,CAAES,OAAQ,iBAPhB,SASE,cAACb,EAAD,IAEO8D,EACH7D,MAAO,UACPxD,QAASN,EAAKM,QAAQO,UACtBkD,eAAgB/D,EAAKQ,QAAQU,YAInC,cAAC2G,EAAA,EAAD,CACE9E,MAAI,EACJsF,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,EACJC,GAAI,EACJxE,GAAI,CAAES,OAAQ,iBAPhB,SASE,cAAC6B,EAAD,IAEOoB,EACHlB,MAAOzG,EAAKQ,QAAQgB,KACpBkF,IAAK1G,EAAKM,QAAQiB,MAAM,GACxBoF,IAAK3G,EAAKM,QAAQiB,MAAMa,IAAI,WAQzBsG,aAAWhB,G,kBC/F1B,MAAMiB,EAAY,CAChB,CAAE5D,MAAO,mBAAoB6D,KAAM,sBACnC,CAAE7D,MAAO,oBAAqB6D,KAAM,uBACpC,CAAE7D,MAAO,gBAAiB6D,KAAM,mBAChC,CAAE7D,MAAO,iBAAkB6D,KAAM,qBAGnC,SAASC,EAAT,GAAoD,IAAhC,UAAEC,EAAF,eAAaC,GAAkB,EACjDpG,QAAQC,IAAI,qBAMZ,OACE,qBACEa,MAAO,CAAEiB,OAAQ,kBAAmBqC,UAAW,SAAUiC,UAAW,IADtE,SAGE,cAACC,EAAA,EAAD,CACExD,MAAM,UACNV,MAAO+D,EACPI,WAAS,EACTlE,SAbkB,CAACC,EAAOkE,KAC9BxG,QAAQC,IAAI,gCAAiCuG,GACzCA,GAAcJ,EAAeI,IAY7BlF,GAAI,CACFmF,cAAe,OACflB,eAAgB,SAChBmB,SAAU,QARd,SAWGV,EAAUzG,KAAI,CAACa,EAAMuG,IACpB,cAACC,EAAA,EAAD,CAEExE,MAAOhC,EAAKgC,MACZd,GAAI,CAAEmF,cAAe,OAAQ7D,SAAU,SAHzC,SAKGxC,EAAK6F,MAJDU,SAYFZ,aAAWG,G,qDCjC1B,MAAMW,EAAU,CACdC,IAAK,GACLC,MAAO,EACPC,OAAQ,IACRC,KAAM,IAIKC,EAAmB,IAQzB,IAR0B,KAC/B7J,EAD+B,SAE/B8J,EAF+B,UAG/BC,EAH+B,WAI/BC,EAJ+B,YAK/BC,EAL+B,UAM/BC,EAN+B,QAO/BC,GACI,EACJxH,QAAQC,IAAI,2BACZ5C,EAAOiD,EAAgBjD,GACvB2C,QAAQC,IAAI,iCAAkC5C,GAE9C,MAAMoK,EAfY,GAeDpK,EAAK8B,OAEtB,OADAa,QAAQC,IAAI,6BAA8BwH,GAExC,mCACE,cAACC,EAAA,EAAD,CAAqBzG,MAAO,OAAQwG,SAAUA,EAAUE,OAAQ,IAAhE,SACE,eAACC,EAAA,EAAD,CACEvK,KAAMA,EACNwF,OAAQgE,EACR/F,MAAO,CAAyBiB,OAAQ,iBAH1C,UAKE,cAAChF,EAAA,EAAD,CACE8K,QAASV,EACTW,KAAM,cAACC,EAAD,CAAoB1K,KAAMA,IAChC2K,UAAU,EACVC,UAAU,EACVC,mBAAmB,EACnBC,SAAU,EACVvF,SAAU,KAEZ,cAAC5F,EAAA,EAAD,CAAOoL,MAAM,EAAMH,UAAU,EAAOD,UAAU,IAC9C,cAAC/K,EAAA,EAAD,CAASoL,QAAS,cAACC,EAAD,MAClB,cAACC,EAAA,EAAD,CACEC,MAAM,SACNC,cAAc,SACdd,OAAQ,GACRe,aAAc,CAAE5B,IAAK,EAAG6B,WAAY,EAAG5G,OAAQ,oBAEjD,eAAC6G,EAAA,EAAD,CACEC,KAAI,mCAA8BtB,EAA9B,YAA2CC,EAA3C,KACJK,QAASR,EACTyB,KAAK,QACLhI,MAAO,CAAEiB,OAAQ,oBACjB2G,aAAc,CAAE3G,OAAQ,oBACxBoG,SAAU,GANZ,UAQE,cAACY,EAAA,EAAD,CAAWlB,QAASR,EAAY2B,SAAS,QACxC3L,EAAKkC,KAAI,CAAC0J,EAAOtC,IAChB,cAACuC,EAAA,EAAD,CAEEJ,KAAM5L,EAAcyJ,EAAQzJ,EAAciC,SAF5C,eACewH,iBAWvBoB,EAAsBlE,IAC1B,MAAM,EAAEsF,EAAF,EAAKC,EAAL,QAAQC,EAAR,KAAiBhM,EAAjB,MAAuBsJ,GAAU9C,EAIvC,OAHA7D,QAAQC,IAAI,yBAA0B4D,GACtC7D,QAAQC,IAAI,iBAAkB5C,EAAKgM,EAAQjH,MAAQ,GAAG7D,SAGpD,mBAAG+K,UAAS,oBAAeH,EAAf,YAAoBC,EAApB,KAAZ,SACE,sBACED,EAAG,EACHC,EAAG,EACHG,IAAK,EACLC,GAAI,EACJC,WAAW,MACXX,KAAK,OACLQ,UAAU,cAPZ,SASGjM,EAAKgM,EAAQjH,MAAQ,GAAG7D,aAM3B+J,EAAgB,IAAiC,IAAhC,OAAEoB,EAAF,QAAUL,EAAV,MAAmBlI,GAAY,EAEpD,OAAO,MAGM4E,aAAWmB,G,kBCjGXyC,KAAKC,GAApB,MACM/C,EAAU,CACdC,IAAK,GACLC,MAAO,EACPC,OAAQ,IACRC,KAAM,GAGF4C,EAAiB,IAA4C,IAA3C,KAAExM,EAAF,QAAQwK,EAAR,UAAiBN,EAAjB,QAA4BC,GAAc,EAChExH,QAAQC,IAAI,yBACZ,MAAMlC,EAAe+L,GAAkBzM,EAAM,GAE7C,OADA2C,QAAQC,IAAI,qBAAsBlC,GAEhC,cAAC2J,EAAA,EAAD,CACEzG,MAAO,OACPwG,SAAU,IACVE,OAAQ,IACRoC,UAAW,IAJb,SAME,eAACC,EAAA,EAAD,CAAUnH,OAAQgE,EAAS/F,MAAO,CAAEiB,OAAQ,iBAA5C,UACE,uBAAMoH,EAAG,IAAKC,EAAG,GAAIN,KAAK,OAAOW,WAAW,SAA5C,0CAEE,wBAAON,EAAG,IAAKC,EAAG,GAAlB,cACI7B,EADJ,IACgBC,EADhB,UAIF,cAACyC,EAAA,EAAD,CACE5M,KAAMU,EACN8J,QAASA,EACTqC,GAAI,IACJC,GAAI,IACJC,YAAa,GACbtB,KAAK,UACL3H,MAAOkJ,GAPT,SASGtM,EAAawB,KAAI,CAAC0J,EAAOtC,IACxB,cAACuC,EAAA,EAAD,CAEEJ,KAAM5L,EAAcyJ,EAAQzJ,EAAciC,SAF5C,eACewH,QAKnB,cAAC1J,EAAA,EAAD,CACEqN,aAAc,CACZC,gBAAiB,UACjBC,aAAc,GACd7B,WAAY,EACZ8B,cAAe,EACfC,YAAa,GACbC,aAAc,IAEhBtC,QAAS,cAAC,GAAD,CAAehL,KAAMU,IAC9B6M,mBAAoB,CAAEzB,GAAG,EAAOC,GAAG,KAErC,cAACb,EAAA,EAAD,CAAQF,QAAS,cAACwC,GAAD,CAAcxN,KAAMU,YAMvCsM,GAAyBxG,IAC7B,MAAM,EACJsF,EADI,EAEJC,EAFI,GAGJc,EAHI,GAIJC,EAJI,SAKJW,EALI,YAMJC,EANI,YAOJX,EAPI,QAQJY,EARI,MASJrE,GACE9C,EAGJ,OAFA7D,QAAQC,IAAI,aAAc4D,GAGxB,sBACEsF,EAAGA,EACHC,EAAGA,EACHN,KAAK,QACLW,WAAYN,EAAIe,EAAK,QAAU,MAC/Be,iBAAiB,UALnB,oBAOiB,IAAVD,GAAeE,QAAQ,GAP9B,QAYE5C,GAAiBzE,IACrB,MAAM,KAAExG,EAAF,OAAQqM,EAAR,QAAgBL,EAAhB,MAAyBlI,EAAzB,aAAgCmJ,GAAiBzG,EAGvD,GAFA7D,QAAQC,IAAI,eAAgB4D,GAExB6F,GAAUL,GAAWA,EAAQlK,OAAQ,CACvC,MAAMwH,EAAQ0C,EAAQ,GAAGR,KACzB7I,QAAQC,IAAI,aAAc0G,GAC1B,MAAM,QAAEpI,EAAF,OAAWiC,EAAX,MAAmB2K,GAAU9N,EAAKsJ,GACxC,OACE,sBAAK7F,MAAO,IAAKwJ,GAAjB,UACE,kDAAmBa,EAAMD,QAAQ,GAAjC,OACA,8CAAe1K,KACf,+CAAgBjC,QAKtB,OAAO,MAGHsM,GAAgBhH,IACpB,MAAM,KAAExG,EAAF,QAAQgM,GAAYxF,EAE1B,OADA7D,QAAQC,IAAI,cAAe4D,GAEzB,oBAAI/C,MAAO,CAAEuF,UAAW,IAAxB,SACGgD,EAAQ9J,KAAI,CAAC0J,EAAOtC,IACnB,oBAEE7F,MAAO,CAAEgC,MAAO5F,EAAcyJ,EAAQzJ,EAAciC,SAFtD,SAIG9B,EAAK4L,EAAM7G,OAAO7D,SAJrB,eACeoI,SAUjBmD,GAAoB,CAACzM,EAAM+N,KAC/B/N,EAAOiD,EAAgBjD,GACvB2C,QAAQC,IAAI,gBAAiB5C,GAC7BA,ENYgCA,KAChC,IAAIgO,EAAMhO,EAAKiO,QAAO,CAACD,EAAK/M,IAAM+M,EAAM/M,EAAEkC,QAAQ,GAKlD,OAJAnD,EAAKkO,SAASjN,IACZA,EAAE6M,MAAoB,IAAX7M,EAAEkC,OAAgB6K,KAGxBhO,GMlBAmO,CAAkBnO,GAEzB2C,QAAQC,IAAI,oBAAqB5C,GACjC,IAAIoO,EAAWpO,EAAKiO,QAAO,CAACI,EAAKC,IAAMD,EAAMC,EAAEnL,QAAQ,GACvDR,QAAQC,IAAI,8BAA+BwL,GAC3C,IAAI1N,EAAeV,EAAK6C,QAAQ5B,GAAMA,EAAE6M,OAASC,IACjDpL,QAAQC,IAAI,yBAA0BlC,GACtC,IAAI6N,EAAc,IAAM7N,EAAauN,QAAO,CAACI,EAAKC,IAAMD,EAAMC,EAAER,OAAO,GACnEU,EAAmB9N,EAAauN,QAAO,CAACI,EAAKC,IAAMD,EAAMC,EAAEnL,QAAQ,GAOvE,OANAzC,EAAa+N,KAAK,CAChBvN,QAAS,SACTkC,UAAW1C,EAAaoB,OAAS,EACjCqB,OAAQiL,EAAWI,EACnBV,MAAOS,IAEF7N,GAGMgI,cAAW8D,G,8BChJ1B,MAAMkC,GAGI,GAIJlF,GAAU,CACdC,IAAK,GACLC,MAAO,GACPC,OAAQ,GACRC,KAAM,GAEF+E,GAAc,CAAE/E,KAAM,GAAIF,MAAO,IACjCkF,GAAe,CAAEnF,IAAK,GAAIE,OAAQ,IAyBlCkF,GAAqBrI,IACzB7D,QAAQC,IAAI,6BACZ,MAAM,KAAE5C,GAASwG,GACVsI,EAAazN,GA1BHrB,KACjB,MAAM+O,EAAa,IAAI/O,GAAMoB,MAC3B,CAACK,EAAGC,IACFV,IAAaS,EAAED,KAAME,EAAEF,OAASR,IAAaS,EAAEH,SAAUI,EAAEJ,YAE/DqB,QAAQC,IAAI,sBAAuBmM,GACnCpM,QAAQC,IAAI,sBAAuB5C,GACnC,MAAM8O,EAAc9N,IAAa+N,GAAa9N,GAAMA,EAAEO,OAatD,OAXAsN,EAAYZ,SAAQ,IAAmB,IAAjB1M,EAAMxB,GAAU,EACpCA,EAAKkO,SAAQ,CAACjN,EAAGiC,KACfjC,EAAEqI,MAAQpG,EAAI,QAGlBP,QAAQC,IAAI,yBAA0B5C,EAAKqB,WAAWY,QAAQb,QAC9D2N,EAAWxM,WAAavB,IAAO8N,GAAc7N,GAAMA,EAAE,GAAGa,SACxDiN,EAAWC,QACTD,EAAWA,EAAWjN,OAAS,GAAGN,KAAOuN,EAAW,GAAGvN,KAAO,EAChEmB,QAAQC,IAAI,sBAAuBkM,GACnCnM,QAAQC,IAAI,qBAAsBmM,GAC3B,CAACA,EAAY/O,EAAKqB,WAAWY,QAAQb,SAMV6N,CAAUjP,GAEtCkP,EACU,IAAdR,GAAoBI,EAAYvM,WAChCiH,GAAQC,IACRD,GAAQG,OACRiF,GAAanF,IACbmF,GAAajF,OAETwF,EACkB,GAAtBL,EAAYE,QACZL,GAAY/E,KACZ+E,GAAYjF,MACZF,GAAQI,KACRJ,GAAQE,MASV,OAPA/G,QAAQC,IACN,kCACAsM,EACA,eACAC,GAIA,qBACE1L,MAAO,CACLG,MAAO,OACP0G,OAAQ4E,EAAc,GACtBxK,OAAQ,kBACR0K,SAAU,QALd,SAQE,eAACC,GAAA,EAAD,CACE5L,MAAO,CAAEiB,OAAQ,mBACjBc,OAAQgE,GACR5F,MAAOuL,EACP7E,OAAQ4E,EACRxC,UAAW,IALb,UAOE,cAACjN,EAAA,EAAD,CAAe6P,gBAAgB,QAC/B,cAAC5P,EAAA,EAAD,CACE6P,yBAAyB,EACzB/E,QAAS,OACTgF,KAAM,SACNhE,KAAM,OACNiE,OAAQ,CAAC,UAAW,WACpB3E,SAAU,EACV4E,UAAWZ,EAAYE,QAAU,EAAI,EACrCW,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZC,QAASnB,GACTlE,KAAM,CACJ2B,WAAY,SACZ2D,eAAgB,MAChBC,OAAQ,MACR9D,IAAK,GAEPrB,mBAAmB,IAErB,cAAClL,EAAA,EAAD,CACE6K,QAAS,QACTgF,KAAM,SACNhE,KAAM,cACNV,SAAU,EACV4E,UAAWZ,EAAYvM,WACvBkN,OAAQ,CAAC,UAAW,aACpBK,QAASlB,KAEX,cAACqB,GAAA,EAAD,CAAOT,KAAK,SAAS/I,MAAO,CAAC,IAAK,OAClC,cAACyE,EAAA,EAAD,CACEgF,OAAO,aACP/E,MAAM,OACNC,cAAc,MACdC,aAAc,CACZgC,YAAa,GACbD,cAAe,GACf1I,OAAQ,kBACRd,MAAO,SAGX,cAAChE,EAAA,EAAD,CAASuQ,OAAQ,CAAEb,gBAAiB,SACnCjO,EAAWa,KAAI,CAACZ,EAAUgI,KACzB,MAAM8G,EAAetB,EAAYjM,QAC9B5B,GAAMA,EAAEK,UAAYA,IAGvB,OADAqB,QAAQC,IAAI,gBAAiBwN,GAE3B,cAACC,GAAA,EAAD,CACEC,MAAM,SACNC,WAAW,SACX/E,KAAMlK,EACNtB,KAAMoQ,EACN3E,KAAM5L,EAAcyJ,EAAQzJ,EAAciC,QAL5C,SAOGsO,EAAalO,KAAI,CAAC0J,EAAO1I,IACxB,cAAC2I,EAAA,EAAD,CAEEJ,KAAM5L,EAAcyJ,EAAQzJ,EAAciC,SAF5C,eACeoB,iBAYhBwF,WAAM8H,KAAK3B,I,oBCvJ1B,MAmCM4B,GAAgB,IAAe,IAAd,KAAEzQ,GAAW,EAClC2C,QAAQC,IAAI,8BAA+B5C,GAC3CA,EArCiBA,KACjB,MAAMa,EAAYb,EAAKsC,iBAAiBJ,KAAKjB,GAAMA,EAAE,KACrD0B,QAAQC,IAAI,iBAAkB/B,GAC9B8B,QAAQC,IAAI,cAAe5C,GAC3B,IAAI+O,EAAa/N,IAEb,IAAIhB,IACH6B,GAAMA,EAAEC,SACRb,GAAMA,EAAEO,OACRP,GAAMA,EAAEC,UAEVE,MAAK,CAACK,EAAGC,IAAMV,IAAaS,EAAE,GAAIC,EAAE,KAAOV,IAAaS,EAAE,GAAIC,EAAE,MAqBnE,OAnBAqN,EAAa/N,IACA+N,GAAa9N,GAAMA,EAAE,KAC/BiB,KAAKjB,GAAM,CAACA,EAAE,GAAIA,EAAE,GAAGiB,KAAKjB,GAAM,CAACA,EAAE,GAAIA,EAAE,SAC9C0B,QAAQC,IAAI,qBAAsBmM,GAElCA,EAAaA,EAAW7M,KAAKjB,IAC3B,MAAMyP,EAAI,CAAElP,KAAMP,EAAE,IAMpB,OALAJ,EAAUqN,SAASI,IACjB,MAAMqC,EAAMC,OAAOC,YAAY5P,EAAE,IAEjC0P,EAAIG,eAAexC,GAAMoC,EAAEpC,GAAKqC,EAAIrC,GAAOoC,EAAEpC,GAAK,KAE7CoC,KAET/N,QAAQC,IAAI,qBAAsBmM,GAClCA,EAAWlO,UAAYA,EACvBkO,EAAWC,QACTD,EAAWA,EAAWjN,OAAS,GAAGN,KAAOuN,EAAW,GAAGvN,KAAO,EAChEmB,QAAQC,IAAI,qBAAsBmM,GAC3BA,GAKAE,CAAUjP,GAEjB,MACMwJ,EAAU,CACdC,IAAK,GACLC,MAAO,IACPC,OAAQ,GACRC,KAAM,IAEF+E,EAAc,CAAE/E,KAAM,GAAIF,MAAO,IAGjCwF,EACJ,IAAM1F,EAAQC,IAAMD,EAAQG,OAHF,GAAY,GAKlCwF,EACW,GAAfnP,EAAKgP,QACLL,EAAY/E,KACZ+E,EAAYjF,MACZF,EAAQI,KACRJ,EAAQE,MAKV,OAHA/G,QAAQC,IAAI,oBAAqBsM,GACjCvM,QAAQC,IAAI,kBAAmBuM,GAG7B,qBACE1L,MAAO,CACLG,MAAO,OACP0G,OAAQ4E,EAAc,GACtBxK,OAAQ,kBACR0K,SAAU,QALd,SAQE,eAAC2B,GAAA,EAAD,CACE/Q,KAAMA,EACNyD,MAAO,CAAEiB,OAAQ,mBACjBc,OAAQgE,EACR5F,MAAOuL,EACP7E,OAAQ4E,EALV,UAOE,cAACzP,EAAA,EAAD,CAAe6P,gBAAgB,QAC/B,cAAC5P,EAAA,EAAD,CACE6P,yBAAyB,EACzB/E,QAAS,OACTgF,KAAM,SACNhE,KAAM,OACNiE,OAAQ,CAAC,UAAW,WACpB3E,SAAU,EACV4E,UAAW1P,EAAKgP,QAAU,EAAI,EAC9BW,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZC,QAASnB,EACTlE,KAAM,CACJ2B,WAAY,SACZ2D,eAAgB,MAChBC,OAAQ,MACR9D,IAAK,GAEPrB,mBAAmB,IAErB,cAAClL,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CACEqN,aAAc,CACZC,gBAAiB,UACjBC,aAAc,GACd7B,WAAY,EACZ8B,cAAe,EACfC,YAAa,GACbC,aAAc,IAEhBtC,QAAS,cAAC,GAAD,IACTuC,mBAAoB,CAAEzB,GAAG,EAAOC,GAAG,KAErC,cAACb,EAAA,EAAD,CACEgF,OAAO,aACP/E,MAAM,OACNC,cAAc,MACd4F,SAAS,OACT3F,aAAc,CACZgC,YAAa,GACbD,cAAe,GACf1I,OAAQ,kBACRd,MAAO,SAGV5D,EAAKa,UAAUqB,KAAI,CAACoM,EAAGpL,IACtB,cAAC+N,GAAA,EAAD,CAEEzB,KAAK,OACLhF,QAAS8D,EACT4C,QAAQ,IACRlB,OAAQnQ,EAAcqD,EAAIrD,EAAciC,QACxC2J,KAAM5L,EAAcqD,EAAIrD,EAAciC,SALjCoB,WAaX+H,GAAiBzE,IACrB,MAAM,OAAE6F,EAAF,QAAUL,EAAV,MAAmBlI,EAAnB,aAA0BmJ,GAAiBzG,EAGjD,OAFA7D,QAAQC,IAAI,gBAAiB4D,GAEzB6F,GAAUL,GAAWA,EAAQlK,QAC/BkK,EAAQnJ,QAAQ5B,GAAMA,EAAE8D,MAAQ,IAG9B,sBAAKtB,MAAO,IAAKwJ,GAAjB,UACE,2CAAYnJ,KACXkI,EACE5K,MAAK,CAACK,EAAGC,IAAMA,EAAEqD,MAAQtD,EAAEsD,QAC3BlC,QAAQ5B,GAAMA,EAAE8D,MAAQ,IACxB7C,KAAI,CAACjB,EAAGiC,IAEL,mBAEEO,MAAO,CAAEgC,MAAOxE,EAAEwK,MAFpB,mBAGKxK,EAAEuJ,QAHP,YAGkBvJ,EAAE8D,QAFb7B,SASZ,MAGMwF,cAAW+H,I,UC7GXU,OAtEf,YAAmC,IAAX,KAAEnR,GAAQ,EAChC2C,QAAQC,IAAI,yBAA0B5C,GACtC,MAAMoR,EAAOpR,EAAKkC,KAAI,CAACjB,EAAGiC,KACxBjC,EAAE2D,GAAK1B,EACAjC,KAET0B,QAAQC,IAAI,kBAAmB5C,EAAK,IACpC,MAAMqR,EAAUT,OAAOU,QAAQtR,EAAK,IAAIkC,KAAKjB,IAC3C,IAAIyP,EAAI,CAAEa,MAAOtQ,EAAE,GAAIuQ,WAAYvQ,EAAE,GAAI2C,MAAO,IAAK6N,MAAO,GAqC5D,MApCY,MAARxQ,EAAE,KACJyP,EAAE3F,MAAO,GAEC,QAAR9J,EAAE,GACJyP,EAAEgB,WAAcC,IACdhP,QAAQC,IAAI,QAAS+O,GAEnB,qBACElO,MAAO,CACL2L,SAAU,OACVwC,WAAY,OACZ9B,QAAS,GAJb,SAOE,mBAAG+B,KAAMF,EAAO5M,MAAhB,SAAwB4M,EAAOG,IAAItG,UAKzCkF,EAAEgB,WAAcC,IACdhP,QAAQC,IAAI,SAAU+O,GAEpB,qBACElO,MAAO,CACL2L,SAAU,OACVwC,WAAY,OACZ9B,QAAS,GAJb,SAO0B,iBAAhB6B,EAAO5M,OAAqC,MAAhB4M,EAAO5M,MACvC4M,EAAO5M,MAAMgN,WACbJ,EAAO5M,SAKZ2L,KAGT,OACE,qBAAKjN,MAAO,CAAE6G,OAAQ,IAAK1G,MAAO,QAAlC,SACE,cAAC,KAAD,CACEwN,KAAMA,EACNC,QAASA,EACTW,WAAY,CACVC,QAASC,WClDnB,MA8EaC,GAAc,IAA8B,IAA7B,KAAEnS,EAAF,cAAQoS,GAAoB,EACtDzP,QAAQC,IAAI,sBAAuB5C,GACnC,MAAMqS,EAAcC,mBAAQ,IAhFRtS,KACpB2C,QAAQC,IAAI,sBAAuB5C,GAEjC,cAAC6H,EAAA,EAAD,CAAM9E,MAAI,EAACa,MAAO,OAAlB,SACE,cAAC,GAAD,CAAmB5D,KAAMA,OA4EKuS,CAAavS,IAAO,CAACA,IACjDwS,EAAeF,mBAAQ,IAxEGtS,KAChC2C,QAAQC,IAAI,kBAEV,qCACE,cAACiF,EAAA,EAAD,CACE9E,MAAI,EACJkB,GAAI,CACFL,MAAO,CAAEyE,GAAI,OAAQC,GAAI,OAAQC,GAAI,OAAQC,GAAI,MAAOC,GAAI,OAC5Db,SAAU,CACRS,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,MACJC,GAAI,QATV,SAaE,cAAC,EAAD,CACEzI,KAAMA,EACN8J,SAAU,YACVC,UAAW,SACXC,WAAY,SACZC,YAAa,SACbC,UAAWlK,EAAKwB,KAAK,GACrB2I,QAASnK,EAAKwB,KAAK,OAGvB,cAACqG,EAAA,EAAD,CACE9E,MAAI,EACJkB,GAAI,CACFL,MAAO,CAAEyE,GAAI,OAAQC,GAAI,OAAQC,GAAI,OAAQC,GAAI,MAAOC,GAAI,OAC5Db,SAAU,CACRS,GAAI,OACJC,GAAI,OACJC,GAAI,OACJC,GAAI,MACJC,GAAI,QATV,SAaE,cAAC,GAAD,CACEzI,KAAMA,EACNwK,QAAS,QACTN,UAAWlK,EAAKwB,KAAK,GACrB2I,QAASnK,EAAKwB,KAAK,WA4BQiR,CAAyBzS,IAAO,CAACA,IAC9D0S,EAAgBJ,mBAAQ,IAtBRtS,KACtB2C,QAAQC,IAAI,mBAEV,cAACiF,EAAA,EAAD,CAAM9E,MAAI,EAACa,MAAO,OAAlB,SACE,cAAC,GAAD,CAAe5D,KAAMA,OAkBW2S,CAAe3S,IAAO,CAACA,IACrD4S,EAAiBN,mBAAQ,IAdRtS,KACvB2C,QAAQC,IAAI,yBAEV,cAACiF,EAAA,EAAD,CAAM9E,MAAI,EAACa,MAAO,OAAlB,SACE,cAAC,GAAD,CAAgB5D,KAAMA,OAUW6S,CAAgB7S,IAAO,CAACA,IAY7D,OACE,cAAC6H,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,cAAe,EACfC,WAAY,EACZC,eAAe,gBACfC,WAAW,SACXC,KAAK,OACLY,UAAW,EARb,SAVkB,CAChB6F,kBAAmBwD,EACnBxI,iBAAkB2I,EAClB/B,cAAeiC,EACfvB,eAAgByB,GAEDR,MC5Ff/O,GAAIC,EAAQ,KAMLwP,GAAYtM,IACvB,OAAO,KAAExG,EAAF,aAAQ+S,GAAgBC,GAAW5O,mBAAS,CACjDpE,KAAM,KACN+S,cAAc,KAETE,EAAOC,GAAY9O,mBAAS,oBAEnC+O,qBAAU,KACRxQ,QAAQC,IAAI,oBXGTwQ,eAAyBC,GAC9B1Q,QAAQC,IAAI,OAAQyQ,GACpB,MAAMrT,QAAasT,MAAMD,GACtBE,MAAMC,IACL,IAAKA,EAASC,GAAI,MAAM,IAAIC,MAAMF,EAASG,YAC3C,OAAOH,EAAS5K,UAEjBgL,OAAOC,IACN,MAAMA,KAGV,OADAlR,QAAQC,IAAI,wBACL5C,EWbL8T,CAbF,gHAcKP,MAAMQ,IACLpR,QAAQC,IAAI,6BAA8BmR,GAC1CA,EAAU/S,IAAY+S,EAAS/S,KAC/B,MAAMhB,EAAO,IAAIF,EAAciU,GAC/Bf,EAAQ,CAAEhT,OAAM+S,cAAc,IAC9BpQ,QAAQC,IAAI,sBAEbgR,OAAOC,GAAUlR,QAAQC,IAAI,+BAAgCiR,KAChElR,QAAQC,IAAI,qBACX,IAEH,MAAMoR,EAAqBC,uBACxBzT,IACCwS,EAAQ,CAAEhT,KAAMqD,GAAE6Q,MAAMlU,EAAKK,WAAWG,IAAWuS,cAAc,MAEnE,CAAC/S,IAGGmU,EAAmBF,uBAAaG,IACpCzR,QAAQC,IAAI,SAAUwR,EAAU,iBAChClB,EAASkB,KACR,IAIH,OAFAzR,QAAQC,IAAI,sBAAuB5C,EAAM,iBAAkBiT,GAEtDF,EAKH,qCACE,cAAC,EAAD,CAAa/S,KAAMA,EAAMgE,YAAagQ,IACtC,cAAC,EAAD,CAAYlL,UAAWmK,EAAOlK,eAAgBoL,IAC9C,cAAChC,GAAD,CAAanS,KAAMA,EAAKU,aAAc0R,cAAea,OAPhD,qFC7CLoB,GAAcC,SAASC,eAAe,QAE5CC,IAASC,OACP,cAAC3B,GAAD,IAEAuB,M","file":"static/js/main.13fc6efb.chunk.js","sourcesContent":["import {\n  CartesianGrid,\n  Line,\n  LineChart,\n  Tooltip,\n  XAxis,\n  YAxis\n} from \"recharts\";\nimport \"./styles.css\";\n// import { LineChart, Line, CartesianGrid, XAxis, YAxis } from 'recharts';\nconst data = [{ name: \"Page A\", uv: 400, pv: 2400, amt: 2400 }];\n\nconst renderLineChart = (\n  <LineChart width={600} height={300} data={data}>\n    <Line\n      type=\"monotone\"\n      dataKey=\"pv\"\n      stroke=\"#8884d8\"\n      margin={{ top: 50, right: 20, bottom: 5, left: 200 }}\n    />\n    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"10 5\" />\n    <XAxis dataKey=\"name\" />\n    <YAxis />\n    <Tooltip />\n  </LineChart>\n);\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Nobel Prize All In One</h1>\n      {/* {renderLineChart} */}\n    </div>\n  );\n}\n","import * as d3 from \"d3\";\r\n\r\nexport const COLOR_PALETTE = [\r\n  \"#0cc0aa\",\r\n  \"#4787c9\",\r\n  \"#fb0998\",\r\n  \"#59a20c\",\r\n  \"#7c08c5\",\r\n  \"#e0c645\",\r\n  \"#715cb6\",\r\n  \"#ef972d\",\r\n  \"#a57a6a\",\r\n  \"#c6c0fe\",\r\n  \"#ec9bfa\",\r\n  \"#421674\",\r\n  \"#b3e467\",\r\n  \"#5c190c\",\r\n  \"#55f17b\",\r\n  \"#c25357\",\r\n  \"#b9dcca\",\r\n  \"#29403b\",\r\n  \"#f4b8ab\",\r\n  \"#6a8b7b\",\r\n];\r\n\r\nexport async function fetchData(url) {\r\n  console.log(\"URL:\", url)\r\n  const data = await fetch(url)\r\n    .then((response) => {\r\n      if (!response.ok) throw new Error(response.statusText);\r\n      return response.text();\r\n    })\r\n    .catch((error) => {\r\n      throw error;\r\n    });\r\n  console.log(\"Data fetch complete!\");\r\n  return data;\r\n  // try {\r\n  //   let response = await fetch(url);\r\n  //   if (!response.ok) {\r\n  //     throw new Error(response.statusText);\r\n  //   }\r\n  //   let text = await response.text();\r\n  //   // console.log(text);\r\n  //   return text;\r\n  // } catch (error) {\r\n  //   console.log(\"handleError:\", error);\r\n  //   throw error;\r\n  // }\r\n}\r\n\r\nexport class ChartDataUtil {\r\n  constructor(data) {\r\n    this._data = data;\r\n    this._initOptions();\r\n    this._initFilters();\r\n    this.filterData();\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get filters() {\r\n    return this._filters;\r\n  }\r\n\r\n  get filteredData() {\r\n    return this._filteredData;\r\n  }\r\n}\r\n\r\nChartDataUtil.prototype._initOptions = function () {\r\n  this._options = {};\r\n  this._options.countries = Array.from(\r\n    d3.group(this._data, (d) => d.country).keys()\r\n  ).sort();\r\n  this._options.categories = Array.from(\r\n    d3.group(this._data, (d) => d.category).keys()\r\n  );\r\n  this._options.years = Array.from(\r\n    d3.group(this._data, (d) => d.year).keys()\r\n  ).sort((a, b) => a - b);\r\n  this._options.genders = [\"Male\", \"Female\"];\r\n};\r\n\r\nChartDataUtil.prototype._initFilters = function () {\r\n  this._filters = {};\r\n  this._filters.category = [...this._options.categories];\r\n  this._filters.gender = [...this._options.genders];\r\n  this._filters.country = d3\r\n    .rollups(\r\n      this._data,\r\n      (v) => v.length,\r\n      (d) => d.country\r\n    )\r\n    .sort((d1, d2) => d3.descending(d1[1], d2[1]))\r\n    .slice(0, 10)\r\n    .map((d) => d[0])\r\n    .concat([\"China\", \"India\"]);\r\n  this._filters.year = [this._options.years[0], this._options.years.at(-1)];\r\n};\r\n\r\nChartDataUtil.prototype._buildChartData = function () {\r\n  this._filteredData.winnersByCountry = d3\r\n    .flatRollup(\r\n      this._filteredData,\r\n      (v) => v.length,\r\n      (d) => d.country\r\n    )\r\n    .sort((a, b) => d3.descending(a[1], b[1]));\r\n\r\n  this._filteredData.maxWinners = this._filteredData.winnersByCountry[0];\r\n  this._filteredData.sumWinners = d3.sum(\r\n    this._filteredData.winnersByCountry,\r\n    ([k, v]) => v\r\n  );\r\n  this._filteredData.countryNum = this._filteredData.winnersByCountry.length;\r\n  this._filteredData.year = this._filters.year;\r\n  this._filteredData.categories = this._filters.category;\r\n};\r\n\r\nChartDataUtil.prototype.filterData = function (filters = null) {\r\n  if (filters) this._filters = filters;\r\n  console.log(\"Before filter, filters:\", filters);\r\n  console.log(\"Before filter, data:\", this);\r\n  this._filteredData = this._data.filter(\r\n    (d) =>\r\n      d.year >= this._filters.year[0] &&\r\n      d.year <= this._filters.year[1] &&\r\n      this._filters.country.find(\r\n        (item) => item.toLowerCase() == d.country.toLowerCase()\r\n      ) &&\r\n      this._filters.category.find(\r\n        (item) => item.toLowerCase() == d.category.toLowerCase()\r\n      ) &&\r\n      this._filters.gender.find(\r\n        (item) => item.toLowerCase() == d.gender.toLowerCase()\r\n      )\r\n  );\r\n\r\n  this._buildChartData();\r\n  console.log(\"After filter, data:\", this);\r\n  return this;\r\n};\r\n\r\nexport const getNumByCountry = (filter) => {\r\n  return filter.winnersByCountry.map((d, i) => ({\r\n    country: d[0],\r\n    number: d[1],\r\n    countryId: i + 1,\r\n  }));\r\n};\r\n\r\nexport const getRadioByCountry = (data) => {\r\n  let sum = data.reduce((sum, d) => sum + d.number, 0);\r\n  data.forEach((d) => {\r\n    d.radio = (d.number * 100) / sum;\r\n    // d.radio = `${((d.number * 100) / sum).toFixed(0)}%`;\r\n  });\r\n  return data;\r\n};\r\n","import { useState } from \"react\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport InputLabel from \"@mui/material/InputLabel\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport FormControl from \"@mui/material/FormControl\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Select from \"@mui/material/Select\";\nimport Checkbox from \"@mui/material/Checkbox\";\n\nconst _ = require(\"lodash\");\n\nconst ITEM_HEIGHT = 48;\nconst ITEM_PADDING_TOP = 8;\nconst MenuProps = {\n  PaperProps: {\n    style: {\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n      width: 250,\n    },\n  },\n};\n\nexport const FilterSelect = ({\n  data,\n  label,\n  options,\n  defaultOptions,\n  onSetFilter,\n  sx,\n}) => {\n  console.log(\"label:\", label);\n  const [selectedOptions, setSelectedOptions] = useState(defaultOptions);\n  const [[labelId, selectId], setCtrlId] = useState([\n    _.uniqueId(label + \"_id_\"),\n    _.uniqueId(label + \"_select_\"),\n  ]);\n\n  const handleChange = (event) => {\n    const {\n      target: { value },\n    } = event;\n    const newValue = typeof value === \"string\" ? value.split(\",\") : value;\n    setSelectedOptions(\n      // On autofill we get a the stringified value.\n      newValue\n    );\n    console.log(\"new filter:\", {\n      ...data.filters,\n      [label.toLowerCase()]: newValue,\n    });\n    onSetFilter({ ...data.filters, [label.toLowerCase()]: newValue });\n  };\n  return (\n    <>\n      <FormControl sx={{ ...sx, border: \"2px solid green\" }}>\n        <InputLabel id={labelId}>{label}</InputLabel>\n        <Select\n          labelId={labelId}\n          id={selectId}\n          multiple\n          value={selectedOptions}\n          onChange={handleChange}\n          classes={{\n            select: {\n              fontSize: \"small\",\n              margin: \"100px 200px\",\n              border: \"4px solid cyan\",\n              color: \"green\",\n            },\n          }}\n          input={<OutlinedInput label={label} />}\n          renderValue={(selected) => selected.join(\", \")}\n          MenuProps={MenuProps}\n          sx={{ fontSize: \"small\", fontWeight: 900 }}\n        >\n          {options.map((option) => (\n            <MenuItem\n              key={option}\n              value={option}\n              sx={{ fontSize: \"small\", border: \"2px solid green\" }}\n            >\n              <Checkbox checked={selectedOptions.includes(option)} />\n              <ListItemText primary={option} />\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    </>\n  );\n};\n","import { Paper, Slider } from \"@mui/material\";\nimport { useState } from \"react\";\n\nexport function FilterSlide(props) {\n  const { range, onSetFilter, data, min, max } = props;\n  const [value, setValue] = useState(range);\n  const handleSliderChange = (event, newValue) => {\n    console.log(\"On Slider Change:\", newValue);\n    setValue(newValue);\n  };\n  const handleSliderCommitChange = (event, newValue) => {\n    console.log(\"On Slider Commit Change:\", newValue);\n    onSetFilter({ ...data.filters, year: newValue });\n  };\n\n  return (\n    <Paper\n      elevation={10}\n      sx={{\n        border: \"2px solid green\",\n        textAlign: \"center\",\n        pt: 2,\n        px: 3,\n      }}\n    >\n      <Slider\n        defaultValue={range}\n        value={value}\n        onChange={handleSliderChange}\n        onChangeCommitted={handleSliderCommitChange}\n        valueLabelDisplay=\"on\"\n        min={min}\n        max={max}\n        step={1}\n        marks\n        disableSwap\n        sx={{ border: \"2px solid yellow\", mt: 0 }}\n      ></Slider>\n    </Paper>\n  );\n}\n","import { Grid } from \"@mui/material\";\nimport * as React from \"react\";\nimport { useState } from \"react\";\nimport { FilterSelect } from \"./MenuFiltersItems/FilterSelect\";\nimport { FilterSlide } from \"./MenuFiltersItems/FilterSlide\";\n\nconst MenuFilters = ({ data, onSetFilter }) => {\n  console.log(\"Menu rendering\");\n  const commonConfig = {\n    data,\n    onSetFilter,\n    sx: { width: \"100%\", maxWidth: \"100%\" },\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      columnSpacing={2}\n      rowSpacing={1}\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      wrap=\"wrap\"\n    >\n      <Grid\n        item\n        xs={8}\n        sm={4}\n        md={4}\n        lg={2}\n        xl={2}\n        sx={{ border: \"2px solid red\" }}\n      >\n        <FilterSelect\n          {...{\n            ...commonConfig,\n            label: \"Category\",\n            options: data.options.categories,\n            defaultOptions: data.filters.category,\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={4}\n        sm={2}\n        md={2}\n        lg={1}\n        xl={1}\n        sx={{ border: \"2px solid red\" }}\n      >\n        <FilterSelect\n          {...{\n            ...commonConfig,\n            label: \"Gender\",\n            options: data.options.genders,\n            defaultOptions: data.filters.gender,\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={6}\n        md={6}\n        lg={3}\n        xl={3}\n        sx={{ border: \"2px solid red\" }}\n      >\n        <FilterSelect\n          {...{\n            ...commonConfig,\n            label: \"Country\",\n            options: data.options.countries,\n            defaultOptions: data.filters.country,\n          }}\n        />\n      </Grid>\n      <Grid\n        item\n        xs={12}\n        sm={10}\n        md={10}\n        lg={6}\n        xl={6}\n        sx={{ border: \"2px solid red\" }}\n      >\n        <FilterSlide\n          {...{\n            ...commonConfig,\n            range: data.filters.year,\n            min: data.options.years[0],\n            max: data.options.years.at(-1),\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default React.memo(MenuFilters);\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport ToggleButton from \"@mui/material/ToggleButton\";\nimport ToggleButtonGroup from \"@mui/material/ToggleButtonGroup\";\n\nconst chartList = [\n  { value: \"WinnersByCountry\", text: \"Winners By Country\" },\n  { value: \"WinnersByCategory\", text: \"Winners By Category\" },\n  { value: \"WinnersByYear\", text: \"Winners By Year\" },\n  { value: \"WinnersByTable\", text: \"Winners By Table\" },\n];\n\nfunction MenuCharts({ selection, onSetSelection }) {\n  console.log(\"MenuCharts render\");\n  const handleSelection = (event, newSelection) => {\n    console.log(\"handleSelection newSelection:\", newSelection);\n    if (newSelection) onSetSelection(newSelection);\n  };\n\n  return (\n    <div\n      style={{ border: \"2px solid green\", textAlign: \"center\", marginTop: 10 }}\n    >\n      <ToggleButtonGroup\n        color=\"primary\"\n        value={selection}\n        exclusive\n        onChange={handleSelection}\n        sx={{\n          textTransform: \"none\",\n          justifyContent: \"center\",\n          flexWrap: \"wrap\",\n        }}\n      >\n        {chartList.map((item, index) => (\n          <ToggleButton\n            key={index}\n            value={item.value}\n            sx={{ textTransform: \"none\", fontSize: \"large\" }}\n          >\n            {item.text}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n    </div>\n  );\n}\n\nexport default React.memo(MenuCharts);\n","import * as React from \"react\";\nimport {\n  BarChart,\n  Cell,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar,\n  ResponsiveContainer,\n  LabelList,\n} from \"recharts\";\n\nimport { getNumByCountry, COLOR_PALETTE } from \"../../dataUtil\";\n\nconst margins = {\n  top: 80,\n  right: 5,\n  bottom: 100,\n  left: 30,\n};\nconst minXTickGap = 50;\n\nexport const WinnersByCountry = ({\n  data,\n  xDataKey,\n  xDataType,\n  barDataKey,\n  barDataType,\n  beginYear,\n  endYear,\n}) => {\n  console.log(\"WinnersByCountry render\");\n  data = getNumByCountry(data);\n  console.log(\"WinnersByCountry barchartData:\", data);\n\n  const minWidth = data.length * minXTickGap;\n  console.log(\"WinnersByCountry minWidth:\", minWidth);\n  return (\n    <>\n      <ResponsiveContainer width={\"100%\"} minWidth={minWidth} height={600}>\n        <BarChart\n          data={data}\n          margin={margins}\n          style={{ /*overflow: \"auto\", */ border: \"2px solid red\" }}\n        >\n          <XAxis\n            dataKey={xDataKey}\n            tick={<CustomizedAxisTick data={data} />}\n            tickLine={false}\n            axisLine={false}\n            allowDataOverflow={false}\n            interval={0}\n            fontSize={20}\n          />\n          <YAxis hide={true} axisLine={false} tickLine={false} />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend\n            align=\"center\"\n            verticalAlign=\"middle\"\n            height={36}\n            wrapperStyle={{ top: 5, paddingTop: 0, border: \"2px solid cyan\" }}\n          />\n          <Bar\n            name={`Nobel winners by country(${beginYear}~${endYear})`}\n            dataKey={barDataKey}\n            fill=\"green\"\n            style={{ border: \"2px solid yellow\" }}\n            wrapperStyle={{ border: \"2px solid yellow\" }}\n            interval={30}\n          >\n            <LabelList dataKey={barDataKey} position=\"top\" />\n            {data.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n              />\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nconst CustomizedAxisTick = (props) => {\n  const { x, y, payload, data, index } = props;\n  console.log(\"Render AxisTick props:\", props);\n  console.log(\"Payload value:\", data[payload.value - 1].country);\n\n  return (\n    <g transform={`translate(${x},${y})`}>\n      <text\n        x={0}\n        y={0}\n        dx={-5}\n        dy={0}\n        textAnchor=\"end\"\n        fill=\"#666\"\n        transform=\"rotate(-90)\"\n      >\n        {data[payload.value - 1].country}\n      </text>\n    </g>\n  );\n};\n\nconst CustomTooltip = ({ active, payload, label }) => {\n  //Don't display tooltip, but remaining the animation effect of bar selection\n  return null;\n};\n\nexport default React.memo(WinnersByCountry);\n","import * as React from \"react\";\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\nimport {\n  getNumByCountry,\n  getRadioByCountry,\n  COLOR_PALETTE,\n} from \"../../dataUtil\";\n\nconst RADIAN = Math.PI / 180;\nconst margins = {\n  top: 30,\n  right: 5,\n  bottom: 100,\n  left: 5,\n};\n\nconst WinnersByRadio = ({ data, dataKey, beginYear, endYear }) => {\n  console.log(\"WinnersByRadio render\");\n  const filteredData = filterDataByRadio(data, 5);\n  console.log(\"filtered pie data:\", filteredData);\n  return (\n    <ResponsiveContainer\n      width={\"100%\"}\n      minWidth={240}\n      height={600}\n      minHeight={500}\n    >\n      <PieChart margin={margins} style={{ border: \"2px solid red\" }}>\n        <text x={120} y={30} fill=\"#666\" textAnchor=\"middle\">\n          Winners Percentage By Country\n          <tspan x={120} y={50}>\n            ({beginYear}~{endYear})\n          </tspan>\n        </text>\n        <Pie\n          data={filteredData}\n          dataKey={dataKey}\n          cx={120}\n          cy={150}\n          outerRadius={70}\n          fill=\"#8884d8\"\n          label={renderCustomizedLabel}\n        >\n          {filteredData.map((entry, index) => (\n            <Cell\n              key={`cell-${index}`}\n              fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n            />\n          ))}\n        </Pie>\n        <Tooltip\n          contentStyle={{\n            backgroundColor: \"#f7efd2\",\n            borderRadius: 10,\n            paddingTop: 2,\n            paddingBottom: 2,\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n          content={<CustomTooltip data={filteredData} />}\n          allowEscapeViewBox={{ x: false, y: false }}\n        />\n        <Legend content={<CustomLegend data={filteredData} />} />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n};\n\nconst renderCustomizedLabel = (props) => {\n  const {\n    x,\n    y,\n    cx,\n    cy,\n    midAngle,\n    innerRadius,\n    outerRadius,\n    percent,\n    index,\n  } = props;\n  console.log(\"Pie label:\", props);\n\n  return (\n    <text\n      x={x}\n      y={y}\n      fill=\"black\"\n      textAnchor={x > cx ? \"start\" : \"end\"}\n      dominantBaseline=\"central\"\n    >\n      {`${(percent * 100).toFixed(0)}%`}\n    </text>\n  );\n};\n\nconst CustomTooltip = (props) => {\n  const { data, active, payload, label, contentStyle } = props;\n  console.log(\"Pie tooltop:\", props);\n\n  if (active && payload && payload.length) {\n    const index = payload[0].name;\n    console.log(\"Pie index:\", index);\n    const { country, number, radio } = data[index];\n    return (\n      <div style={{ ...contentStyle }}>\n        <p>{`Percentage: ${radio.toFixed(0)}%`}</p>\n        <p>{`Number: ${number}`}</p>\n        <p>{`Country: ${country}`}</p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nconst CustomLegend = (props) => {\n  const { data, payload } = props;\n  console.log(\"xxx legend:\", props);\n  return (\n    <ul style={{ marginTop: 20 }}>\n      {payload.map((entry, index) => (\n        <li\n          key={`item-${index}`}\n          style={{ color: COLOR_PALETTE[index % COLOR_PALETTE.length] }}\n        >\n          {data[entry.value].country}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nconst filterDataByRadio = (data, minRadio) => {\n  data = getNumByCountry(data);\n  console.log(\"barchartData:\", data);\n  data = getRadioByCountry(data);\n\n  console.log(\"XXXXXX, RAW data:\", data);\n  let totalNum = data.reduce((acc, c) => acc + c.number, 0);\n  console.log(\"XXXXXX, RAW data total num:\", totalNum);\n  let filteredData = data.filter((d) => d.radio >= minRadio);\n  console.log(\"XXXXXX, filtered data:\", filteredData);\n  let othersRadio = 100 - filteredData.reduce((acc, c) => acc + c.radio, 0);\n  let totalFilteredNum = filteredData.reduce((acc, c) => acc + c.number, 0);\n  filteredData.push({\n    country: \"Others\",\n    countryId: filteredData.length + 1,\n    number: totalNum - totalFilteredNum,\n    radio: othersRadio,\n  });\n  return filteredData;\n};\n\nexport default React.memo(WinnersByRadio);\n","import React from \"react\";\nimport * as d3 from \"d3\";\nimport { COLOR_PALETTE } from \"../../dataUtil\";\nimport {\n  CartesianGrid,\n  Legend,\n  ResponsiveContainer,\n  Scatter,\n  Cell,\n  ScatterChart,\n  Tooltip,\n  XAxis,\n  YAxis,\n  ZAxis,\n} from \"recharts\";\n\nconst mark = {\n  size: 10,\n  width: 10,\n  height: 15,\n};\n\nconst horizontalGap = 10;\nconst margins = {\n  top: 20,\n  right: 20,\n  bottom: 30,\n  left: 0,\n};\nconst horPaddings = { left: 10, right: 20 };\nconst vertPaddings = { top: 10, bottom: 10 };\n\nconst buildData = (data) => {\n  const sortedData = [...data].sort(\n    (a, b) =>\n      d3.ascending(a.year, b.year) || d3.ascending(a.category, b.category)\n  );\n  console.log(\"XXXXX dataPerYear1:\", sortedData);\n  console.log(\"XXXXX dataPerYear1:\", data);\n  const dataPerYear = d3.flatGroup(sortedData, (d) => d.year);\n\n  dataPerYear.forEach(([year, data]) => {\n    data.forEach((d, i) => {\n      d.index = i + 1;\n    });\n  });\n  console.log(\"XXXXX sorted category:\", data.categories.slice().sort());\n  sortedData.maxWinners = d3.max(dataPerYear, (d) => d[1].length);\n  sortedData.yearNum =\n    sortedData[sortedData.length - 1].year - sortedData[0].year + 1;\n  console.log(\"XXXXX dataPerYear2:\", dataPerYear);\n  console.log(\"XXXXX sorted data:\", sortedData);\n  return [sortedData, data.categories.slice().sort()];\n};\n\nconst WinnersByCategory = (props) => {\n  console.log(\"WinnersByCategory render!\");\n  const { data } = props;\n  const [dataPerYear, categories] = buildData(data);\n\n  const chartHeight =\n    mark.height * 1.2 * dataPerYear.maxWinners +\n    margins.top +\n    margins.bottom +\n    vertPaddings.top +\n    vertPaddings.bottom;\n\n  const xAxisWidth =\n    dataPerYear.yearNum * 20 +\n    horPaddings.left +\n    horPaddings.right +\n    margins.left +\n    margins.right;\n\n  console.log(\n    \"WinnersByCategory Chart height:\",\n    chartHeight,\n    \" xAxisWidth:\",\n    xAxisWidth\n  );\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: chartHeight + 20,\n        border: \"2px solid black\",\n        overflow: \"auto\",\n      }}\n    >\n      <ScatterChart\n        style={{ border: \"2px solid green\" }}\n        margin={margins}\n        width={xAxisWidth}\n        height={chartHeight}\n        minHeight={400}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          allowDuplicatedCategory={false}\n          dataKey={\"year\"}\n          type={\"number\"}\n          name={\"year\"}\n          domain={[\"dataMin\", \"dataMax\"]}\n          interval={0}\n          tickCount={dataPerYear.yearNum / 2 + 1}\n          angle={-90}\n          minTickGap={20}\n          tickMargin={25}\n          padding={horPaddings}\n          tick={{\n            textAnchor: \"middle\",\n            verticalAnchor: \"end\",\n            stroke: \"red\",\n            dx: -3,\n          }}\n          allowDataOverflow={true}\n        />\n        <YAxis\n          dataKey={\"index\"}\n          type={\"number\"}\n          name={\"WinnerCount\"}\n          interval={0}\n          tickCount={dataPerYear.maxWinners}\n          domain={[\"dataMin\", \"dataMax+2\"]}\n          padding={vertPaddings}\n        />\n        <ZAxis type=\"number\" range={[100, 100]} />\n        <Legend\n          layout=\"horizontal\"\n          align=\"left\"\n          verticalAlign=\"top\"\n          wrapperStyle={{\n            paddingLeft: 60,\n            paddingBottom: 10,\n            border: \"2px solid green\",\n            width: \"50%\",\n          }}\n        />\n        <Tooltip cursor={{ strokeDasharray: \"3 3\" }} />\n        {categories.map((category, index) => {\n          const categoryData = dataPerYear.filter(\n            (d) => d.category == category\n          );\n          console.log(\"fff category:\", categoryData);\n          return (\n            <Scatter\n              shape=\"circle\"\n              legendType=\"circle\"\n              name={category}\n              data={categoryData}\n              fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n            >\n              {categoryData.map((entry, i) => (\n                <Cell\n                  key={`cell-${i}`}\n                  fill={COLOR_PALETTE[index % COLOR_PALETTE.length]}\n                />\n              ))}\n            </Scatter>\n          );\n        })}\n      </ScatterChart>\n    </div>\n  );\n};\n\nexport default React.memo(WinnersByCategory);\n","import * as React from \"react\";\nimport { useState } from \"react\";\nimport { Button } from \"@mui/material\";\nimport { COLOR_PALETTE } from \"../../dataUtil\";\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Area,\n  Legend,\n} from \"recharts\";\nimport * as d3 from \"d3\";\n\nconst buildData = (data) => {\n  const countries = data.winnersByCountry.map((d) => d[0]);\n  console.log(\"XXXXX country:\", countries);\n  console.log(\"XXXXX data:\", data);\n  let sortedData = d3\n    .flatRollup(\n      [...data],\n      (v) => v.length,\n      (d) => d.year,\n      (d) => d.country\n    )\n    .sort((a, b) => d3.ascending(a[0], b[0]) || d3.ascending(a[1], b[1]));\n\n  sortedData = d3\n    .flatGroup(sortedData, (d) => d[0])\n    .map((d) => [d[0], d[1].map((d) => [d[1], d[2]])]);\n  console.log(\"XXXXX sortedData1:\", sortedData);\n\n  sortedData = sortedData.map((d) => {\n    const o = { year: d[0] };\n    countries.forEach((c) => {\n      const obj = Object.fromEntries(d[1]);\n      // console.log(\"XXXX: obj:\", obj);\n      obj.hasOwnProperty(c) ? (o[c] = obj[c]) : (o[c] = 0);\n    });\n    return o;\n  });\n  console.log(\"XXXXX sortedData2:\", sortedData);\n  sortedData.countries = countries;\n  sortedData.yearNum =\n    sortedData[sortedData.length - 1].year - sortedData[0].year + 1;\n  console.log(\"XXXXX sorted data:\", sortedData);\n  return sortedData;\n};\n\nconst WinnersByYear = ({ data }) => {\n  console.log(\"WinnersByYear render, data:\", data);\n  data = buildData(data);\n\n  const horizontalGap = 10;\n  const margins = {\n    top: 20,\n    right: 100,\n    bottom: 30,\n    left: 30,\n  };\n  const horPaddings = { left: 10, right: 20 };\n  const vertPaddings = { top: 10, bottom: 10 };\n\n  const chartHeight =\n    400 + margins.top + margins.bottom + vertPaddings.top + vertPaddings.bottom;\n\n  const xAxisWidth =\n    data.yearNum * 20 +\n    horPaddings.left +\n    horPaddings.right +\n    margins.left +\n    margins.right;\n\n  console.log(\"XXX Chart height:\", chartHeight);\n  console.log(\"XXX xAxisWidth:\", xAxisWidth);\n\n  return (\n    <div\n      style={{\n        width: \"100%\",\n        height: chartHeight + 20,\n        border: \"2px solid black\",\n        overflow: \"auto\",\n      }}\n    >\n      <AreaChart\n        data={data}\n        style={{ border: \"2px solid green\" }}\n        margin={margins}\n        width={xAxisWidth}\n        height={chartHeight}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          allowDuplicatedCategory={false}\n          dataKey={\"year\"}\n          type={\"number\"}\n          name={\"year\"}\n          domain={[\"dataMin\", \"dataMax\"]}\n          interval={0}\n          tickCount={data.yearNum / 2 + 1}\n          angle={-90}\n          minTickGap={20}\n          tickMargin={25}\n          padding={horPaddings}\n          tick={{\n            textAnchor: \"middle\",\n            verticalAnchor: \"end\",\n            stroke: \"red\",\n            dx: -3,\n          }}\n          allowDataOverflow={true}\n        />\n        <YAxis />\n        <Tooltip\n          contentStyle={{\n            backgroundColor: \"#f7efd2\",\n            borderRadius: 10,\n            paddingTop: 2,\n            paddingBottom: 2,\n            paddingLeft: 10,\n            paddingRight: 10,\n          }}\n          content={<CustomTooltip />}\n          allowEscapeViewBox={{ x: false, y: false }}\n        />\n        <Legend\n          layout=\"horizontal\"\n          align=\"left\"\n          verticalAlign=\"top\"\n          iconType=\"rect\"\n          wrapperStyle={{\n            paddingLeft: 60,\n            paddingBottom: 10,\n            border: \"2px solid green\",\n            width: \"50%\",\n          }}\n        />\n        {data.countries.map((c, i) => (\n          <Area\n            key={i}\n            type=\"step\"\n            dataKey={c}\n            stackId=\"1\"\n            stroke={COLOR_PALETTE[i % COLOR_PALETTE.length]}\n            fill={COLOR_PALETTE[i % COLOR_PALETTE.length]}\n          />\n        ))}\n      </AreaChart>\n    </div>\n  );\n};\n\nconst CustomTooltip = (props) => {\n  const { active, payload, label, contentStyle } = props;\n  console.log(\"Area tooltop:\", props);\n\n  if (active && payload && payload.length) {\n    payload.filter((d) => d.value > 0);\n\n    return (\n      <div style={{ ...contentStyle }}>\n        <p>{`Year:${label}`}</p>\n        {payload\n          .sort((a, b) => b.value - a.value)\n          .filter((d) => d.value > 0)\n          .map((d, i) => {\n            return (\n              <p\n                key={i}\n                style={{ color: d.fill }}\n              >{`${d.dataKey}:${d.value}`}</p>\n            );\n          })}\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default React.memo(WinnersByYear);\n","import * as React from \"react\";\nimport { DataGrid, GridToolbar } from \"@mui/x-data-grid\";\nimport { Button } from \"@mui/material\";\n\nfunction WinnersByTable({ data }) {\n  console.log(\"WinnersByTable render:\", data);\n  const rows = data.map((d, i) => {\n    d.id = i;\n    return d;\n  });\n  console.log(\"WinnersByTable:\", data[0]);\n  const columns = Object.entries(data[0]).map((d) => {\n    let o = { field: d[0], headerName: d[0], width: 150, fluid: 1 };\n    if (d[0] == \"id\") {\n      o.hide = true;\n    }\n    if (d[0] == \"link\") {\n      o.renderCell = (params) => {\n        console.log(\"YYYY:\", params);\n        return (\n          <div\n            style={{\n              overflow: \"auto\",\n              lineHeight: \"160%\",\n              padding: 0,\n            }}\n          >\n            <a href={params.value}>{params.row.name}</a>\n          </div>\n        );\n      };\n    } else {\n      o.renderCell = (params) => {\n        console.log(\"YYYYY:\", params);\n        return (\n          <div\n            style={{\n              overflow: \"auto\",\n              lineHeight: \"160%\",\n              padding: 0,\n            }}\n          >\n            {typeof params.value == \"object\" && params.value != null\n              ? params.value.toString()\n              : params.value}\n          </div>\n        );\n      };\n    }\n    return o;\n  });\n\n  return (\n    <div style={{ height: 480, width: \"100%\" }}>\n      <DataGrid\n        rows={rows}\n        columns={columns}\n        components={{\n          Toolbar: GridToolbar,\n        }}\n      />\n    </div>\n  );\n}\n\nfunction areEqual(prevProps, nextProps) {\n  console.log(\"Render: is data changed:\", prevProps == nextProps);\n  return prevProps == nextProps;\n}\n\n// export default (() => {\n//   console.log(\"Test Memo\");\n//   return React.memo(WinnersByTable, areEqual);\n// })();\nexport default WinnersByTable;\n","import { Grid } from \"@mui/material\";\nimport { useMemo } from \"react\";\nimport WinnersByCountry from \"./Charts/WinnersByCountry\";\nimport WinnersByRadio from \"./Charts/WinnersByRadio\";\nimport WinnersByCategory from \"./Charts/WinnersByCategory\";\nimport WinnersByYear from \"./Charts/WinnersByYear\";\nimport WinnersByTable from \"./Charts/WinnersByTable\";\n\nconst buildScatter = (data) => {\n  console.log(\"build ScatterChart:\", data);\n  return (\n    <Grid item width={\"100%\"}>\n      <WinnersByCategory data={data} />\n    </Grid>\n  );\n};\n// sx={{ xs: 12, sm: 12, md: 12, lg: 4, xl: 4 }}\nconst buildBarchartAndPieChart = (data) => {\n  console.log(\"build barchart\");\n  return (\n    <>\n      <Grid\n        item\n        sx={{\n          width: { xs: \"100%\", sm: \"100%\", md: \"100%\", lg: \"75%\", xl: \"75%\" },\n          maxWidth: {\n            xs: \"100%\",\n            sm: \"100%\",\n            md: \"100%\",\n            lg: \"75%\",\n            xl: \"75%\",\n          },\n        }}\n      >\n        <WinnersByCountry\n          data={data}\n          xDataKey={\"countryId\"}\n          xDataType={\"number\"}\n          barDataKey={\"number\"}\n          barDataType={\"number\"}\n          beginYear={data.year[0]}\n          endYear={data.year[1]}\n        />\n      </Grid>\n      <Grid\n        item\n        sx={{\n          width: { xs: \"100%\", sm: \"100%\", md: \"100%\", lg: \"25%\", xl: \"25%\" },\n          maxWidth: {\n            xs: \"100%\",\n            sm: \"100%\",\n            md: \"100%\",\n            lg: \"25%\",\n            xl: \"25%\",\n          },\n        }}\n      >\n        <WinnersByRadio\n          data={data}\n          dataKey={\"radio\"}\n          beginYear={data.year[0]}\n          endYear={data.year[1]}\n        ></WinnersByRadio>\n      </Grid>\n    </>\n  );\n};\n\nconst buildAreaChart = (data) => {\n  console.log(\"build AreaChart\");\n  return (\n    <Grid item width={\"100%\"}>\n      <WinnersByYear data={data} />\n    </Grid>\n  );\n};\n\nconst buildTableChart = (data) => {\n  console.log(\"build buildTableChart\");\n  return (\n    <Grid item width={\"100%\"}>\n      <WinnersByTable data={data} />\n    </Grid>\n  );\n};\n\nexport const NobelCharts = ({ data, selectedChart }) => {\n  console.log(\"NobelCharts render:\", data);\n  const scatterData = useMemo(() => buildScatter(data), [data]);\n  const barchartData = useMemo(() => buildBarchartAndPieChart(data), [data]);\n  const areachartData = useMemo(() => buildAreaChart(data), [data]);\n  const tablechartData = useMemo(() => buildTableChart(data), [data]);\n\n  const buildNobelChart = () => {\n    const chartList = {\n      WinnersByCategory: scatterData,\n      WinnersByCountry: barchartData,\n      WinnersByYear: areachartData,\n      WinnersByTable: tablechartData,\n    };\n    return chartList[selectedChart];\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      columnSpacing={2}\n      rowSpacing={2}\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      wrap=\"wrap\"\n      marginTop={2}\n    >\n      {buildNobelChart()}\n    </Grid>\n  );\n};\n","import { useEffect, useState, useCallback } from \"react\";\r\nimport * as React from \"react\";\r\nimport { fetchData, ChartDataUtil } from \"../dataUtil\";\r\nimport * as d3 from \"d3\";\r\nimport MenuFilters from \"./MenuFilters\";\r\nimport MenuCharts from \"./MenuCharts\";\r\nimport { NobelCharts } from \"./NobelCharts\";\r\n\r\nconst _ = require(\"lodash\");\r\nconst dataURL =\r\n  \"https://gist.githubusercontent.com/idatatalks/8612a9f89c444b82728473a545813789/raw/nobel_winners_cleaned.csv\";\r\n\r\n// const dataURL = \"nobel_winners_cleaned.csv\";\r\n\r\nexport const NobelApp = (props) => {\r\n  const [{ data, isDataLoaded }, setData] = useState({\r\n    data: null,\r\n    isDataLoaded: false,\r\n  });\r\n  const [chart, setChart] = useState(\"WinnersByCountry\");\r\n\r\n  useEffect(() => {\r\n    console.log(\"Data fetch start\");\r\n    fetchData(dataURL)\r\n      .then((rawData) => {\r\n        console.log(\"Data parse start, rawData:\", rawData);\r\n        rawData = d3.csvParse(rawData, d3.autoType);\r\n        const data = new ChartDataUtil(rawData);\r\n        setData({ data, isDataLoaded: true });\r\n        console.log(\"Data parse end!\");\r\n      })\r\n      .catch((error) => console.log(\"Data fetch failed due to => \", error));\r\n    console.log(\"Data fetch end!\");\r\n  }, []);\r\n\r\n  const handleFilterChange = useCallback(\r\n    (filters) => {\r\n      setData({ data: _.clone(data.filterData(filters)), isDataLoaded: true });\r\n    },\r\n    [data]\r\n  );\r\n\r\n  const handleMenuCharts = useCallback((newChart) => {\r\n    console.log(\"Chart:\", newChart, \" is selected.\");\r\n    setChart(newChart);\r\n  }, []);\r\n\r\n  console.log(\"NobelApp rendering:\", data, \" active chart:\", chart);\r\n\r\n  if (!isDataLoaded) {\r\n    return <h1>Loading data...... please be patient or try again!</h1>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <MenuFilters data={data} onSetFilter={handleFilterChange} />\r\n      <MenuCharts selection={chart} onSetSelection={handleMenuCharts} />\r\n      <NobelCharts data={data.filteredData} selectedChart={chart} />\r\n    </>\r\n  );\r\n};\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { NobelApp } from \"./components/NobelApp\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <NobelApp />,\n\n  rootElement\n);\n"],"sourceRoot":""}